Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> start
Rule 2     start -> expression_statements
Rule 3     start -> loop_statements
Rule 4     start -> functions_statements
Rule 5     start -> conditional_statements
Rule 6     start -> <empty>
Rule 7     expression_statements -> expression start
Rule 8     loop_statements -> while_loop start
Rule 9     loop_statements -> for_loop start
Rule 10    functions_statements -> function_definition start
Rule 11    functions_statements -> function_call start
Rule 12    conditional_statements -> if_else_statement start
Rule 13    conditional_statements -> if_statement start
Rule 14    if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
Rule 15    if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
Rule 16    while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
Rule 17    for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
Rule 18    function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
Rule 19    function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
Rule 20    fname -> IDENTIFIER
Rule 21    arg_list -> IDENTIFIER M_9 SEP_COMMA arg_list
Rule 22    arg_list -> IDENTIFIER M_9
Rule 23    M_9 -> <empty>
Rule 24    M_10 -> <empty>
Rule 25    M_12 -> <empty>
Rule 26    M_11 -> <empty>
Rule 27    M_13 -> <empty>
Rule 28    M_1 -> <empty>
Rule 29    M_2 -> <empty>
Rule 30    M_3 -> <empty>
Rule 31    M_4 -> <empty>
Rule 32    M_5 -> <empty>
Rule 33    M_6 -> <empty>
Rule 34    M_7 -> <empty>
Rule 35    M_8 -> <empty>
Rule 36    function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14
Rule 37    fname2 -> IDENTIFIER
Rule 38    M_14 -> <empty>
Rule 39    arg_to_pass -> arg_to_pass SEP_COMMA arg M_15
Rule 40    arg_to_pass -> arg M_15
Rule 41    arg_to_pass -> <empty>
Rule 42    arg -> rightside
Rule 43    M_15 -> <empty>
Rule 44    compound_statement -> BR_LCUR statement_list BR_RCUR
Rule 45    statement_list -> statement_list statement
Rule 46    statement_list -> statement
Rule 47    statement -> expression
Rule 48    statement -> for_loop
Rule 49    statement -> while_loop
Rule 50    statement -> if_statement
Rule 51    statement -> if_else_statement
Rule 52    if_cond -> TYPE_BOOLEAN
Rule 53    if_cond -> comparison_statement
Rule 54    if_cond -> comparison_statement logop if_cond
Rule 55    if_cond -> comparison_statement bitop if_cond
Rule 56    if_cond -> OP_BITNOT if_cond
Rule 57    comparison_statement -> IDENTIFIER compop any_type
Rule 58    comparison_statement -> IDENTIFIER compop IDENTIFIER
Rule 59    comparison_statement -> any_type compop any_type
Rule 60    comparison_statement -> BR_LCIR if_cond BR_RCIR
Rule 61    logop -> OP_LOGAND
Rule 62    logop -> OP_LOGOR
Rule 63    bitop -> OP_BITAND
Rule 64    bitop -> OP_BITOR
Rule 65    compop -> OP_GREAT
Rule 66    compop -> OP_LESS
Rule 67    compop -> OP_LEEQ
Rule 68    compop -> OP_GREQ
Rule 69    compop -> OP_NOEQ
Rule 70    compop -> OP_COMP
Rule 71    expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
Rule 72    expression -> IDENTIFIER OP_ASGN rightside
Rule 73    expression -> IDENTIFIER OP_ASGN vector_definition M_16
Rule 74    M_16 -> <empty>
Rule 75    expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR
Rule 76    expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR
Rule 77    vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR
Rule 78    vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR
Rule 79    vector_elements -> vector_elements SEP_COMMA TYPE_INTEGER
Rule 80    vector_elements -> TYPE_INTEGER
Rule 81    rightside -> rightside math rightside
Rule 82    rightside -> IDENTIFIER math rightside
Rule 83    rightside -> BR_LCIR rightside BR_RCIR
Rule 84    rightside -> any_type bitop rightside
Rule 85    rightside -> any_type logop rightside
Rule 86    rightside -> IDENTIFIER bitop rightside
Rule 87    rightside -> IDENTIFIER logop rightside
Rule 88    rightside -> IDENTIFIER
Rule 89    rightside -> any_type
Rule 90    rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR
Rule 91    math -> OP_PLUS
Rule 92    math -> OP_MINUS
Rule 93    math -> OP_MULT
Rule 94    math -> OP_DIVIDE
Rule 95    math -> OP_EXPO
Rule 96    math -> OP_REMDR
Rule 97    for_range -> for_range_variables SEP_COLON for_range_variables
Rule 98    for_range_variables -> IDENTIFIER
Rule 99    for_range_variables -> TYPE_INTEGER
Rule 100   any_type -> TYPE_NUMERIC
Rule 101   any_type -> TYPE_INTEGER
Rule 102   any_type -> TYPE_STRING
Rule 103   any_type -> TYPE_BOOLEAN

Terminals, with rules where they appear

BR_LCIR              : 14 15 16 17 18 19 36 60 75 76 77 78 83
BR_LCSR              : 71 90
BR_LCUR              : 44
BR_RCIR              : 14 15 16 17 18 19 36 60 75 76 77 78 83
BR_RCSR              : 71 90
BR_RCUR              : 44
IDENTIFIER           : 17 20 21 22 37 57 58 58 71 72 73 82 86 87 88 90 98
KEYWORD_ELSE         : 14
KEYWORD_FOR          : 17
KEYWORD_FUNCTION     : 18 19
KEYWORD_IF           : 14 15
KEYWORD_IN           : 17
KEYWORD_PRINT        : 75
KEYWORD_RETURN       : 76
KEYWORD_VECTOR       : 77
KEYWORD_VECTOR_CONSTRUCTOR : 78
KEYWORD_WHILE        : 16
OP_ASGN              : 71 72 73
OP_BITAND            : 63
OP_BITNOT            : 56
OP_BITOR             : 64
OP_COMP              : 70
OP_DIVIDE            : 94
OP_EXPO              : 95
OP_FUNC_ASGN         : 18 19
OP_GREAT             : 65
OP_GREQ              : 68
OP_LEEQ              : 67
OP_LESS              : 66
OP_LOGAND            : 61
OP_LOGOR             : 62
OP_MINUS             : 92
OP_MULT              : 93
OP_NOEQ              : 69
OP_PLUS              : 91
OP_REMDR             : 96
SEP_COLON            : 97
SEP_COMMA            : 21 39 77 79
TYPE_BOOLEAN         : 52 103
TYPE_INTEGER         : 77 79 80 99 101
TYPE_NUMERIC         : 100
TYPE_STRING          : 102
error                : 

Nonterminals, with rules where they appear

M_1                  : 14 15
M_10                 : 18
M_11                 : 18
M_12                 : 19
M_13                 : 19
M_14                 : 36
M_15                 : 39 40
M_16                 : 73
M_2                  : 14
M_3                  : 14 15
M_4                  : 16
M_5                  : 16
M_6                  : 16
M_7                  : 17
M_8                  : 17
M_9                  : 21 22
any_type             : 57 59 59 84 85 89
arg                  : 39 40
arg_list             : 18 21
arg_to_pass          : 36 39
bitop                : 55 84 86
comparison_statement : 53 54 55
compop               : 57 58 59
compound_statement   : 14 14 15 16 17 18 19
conditional_statements : 5
expression           : 7 47
expression_statements : 2
fname                : 18 19
fname2               : 36
for_loop             : 9 48
for_range            : 17
for_range_variables  : 97 97
function_call        : 11
function_definition  : 10
functions_statements : 4
if_cond              : 14 15 16 54 55 56 60
if_else_statement    : 12 51
if_statement         : 13 50
logop                : 54 85 87
loop_statements      : 3
math                 : 81 82
program              : 0
rightside            : 42 71 71 72 75 76 81 81 82 83 84 85 86 87 90
start                : 1 7 8 9 10 11 12 13
statement            : 45 46
statement_list       : 44 45
vector_definition    : 73
vector_elements      : 78 79
while_loop           : 8 49

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . start
    (2) start -> . expression_statements
    (3) start -> . loop_statements
    (4) start -> . functions_statements
    (5) start -> . conditional_statements
    (6) start -> .
    (7) expression_statements -> . expression start
    (8) loop_statements -> . while_loop start
    (9) loop_statements -> . for_loop start
    (10) functions_statements -> . function_definition start
    (11) functions_statements -> . function_call start
    (12) conditional_statements -> . if_else_statement start
    (13) conditional_statements -> . if_statement start
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (18) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
    (36) function_call -> . fname2 BR_LCIR arg_to_pass BR_RCIR M_14
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (20) fname -> . IDENTIFIER
    (37) fname2 -> . IDENTIFIER

    $end            reduce using rule 6 (start -> .)
    IDENTIFIER      shift and go to state 7
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_IF      shift and go to state 14

    function_call                  shift and go to state 1
    if_else_statement              shift and go to state 3
    start                          shift and go to state 4
    program                        shift and go to state 5
    fname                          shift and go to state 6
    if_statement                   shift and go to state 8
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    conditional_statements         shift and go to state 12
    expression_statements          shift and go to state 13
    function_definition            shift and go to state 15
    loop_statements                shift and go to state 16
    fname2                         shift and go to state 18
    functions_statements           shift and go to state 20
    expression                     shift and go to state 17

state 1

    (11) functions_statements -> function_call . start
    (2) start -> . expression_statements
    (3) start -> . loop_statements
    (4) start -> . functions_statements
    (5) start -> . conditional_statements
    (6) start -> .
    (7) expression_statements -> . expression start
    (8) loop_statements -> . while_loop start
    (9) loop_statements -> . for_loop start
    (10) functions_statements -> . function_definition start
    (11) functions_statements -> . function_call start
    (12) conditional_statements -> . if_else_statement start
    (13) conditional_statements -> . if_statement start
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (18) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
    (36) function_call -> . fname2 BR_LCIR arg_to_pass BR_RCIR M_14
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (20) fname -> . IDENTIFIER
    (37) fname2 -> . IDENTIFIER

    $end            reduce using rule 6 (start -> .)
    IDENTIFIER      shift and go to state 7
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_IF      shift and go to state 14

    function_call                  shift and go to state 1
    if_else_statement              shift and go to state 3
    start                          shift and go to state 22
    fname                          shift and go to state 6
    if_statement                   shift and go to state 8
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    conditional_statements         shift and go to state 12
    expression_statements          shift and go to state 13
    function_definition            shift and go to state 15
    loop_statements                shift and go to state 16
    fname2                         shift and go to state 18
    functions_statements           shift and go to state 20
    expression                     shift and go to state 17

state 2

    (76) expression -> KEYWORD_RETURN . BR_LCIR rightside BR_RCIR

    BR_LCIR         shift and go to state 23


state 3

    (12) conditional_statements -> if_else_statement . start
    (2) start -> . expression_statements
    (3) start -> . loop_statements
    (4) start -> . functions_statements
    (5) start -> . conditional_statements
    (6) start -> .
    (7) expression_statements -> . expression start
    (8) loop_statements -> . while_loop start
    (9) loop_statements -> . for_loop start
    (10) functions_statements -> . function_definition start
    (11) functions_statements -> . function_call start
    (12) conditional_statements -> . if_else_statement start
    (13) conditional_statements -> . if_statement start
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (18) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
    (36) function_call -> . fname2 BR_LCIR arg_to_pass BR_RCIR M_14
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (20) fname -> . IDENTIFIER
    (37) fname2 -> . IDENTIFIER

    $end            reduce using rule 6 (start -> .)
    IDENTIFIER      shift and go to state 7
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_IF      shift and go to state 14

    function_call                  shift and go to state 1
    if_else_statement              shift and go to state 3
    start                          shift and go to state 24
    fname                          shift and go to state 6
    if_statement                   shift and go to state 8
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    conditional_statements         shift and go to state 12
    expression_statements          shift and go to state 13
    function_definition            shift and go to state 15
    loop_statements                shift and go to state 16
    fname2                         shift and go to state 18
    functions_statements           shift and go to state 20
    expression                     shift and go to state 17

state 4

    (1) program -> start .

    $end            reduce using rule 1 (program -> start .)


state 5

    (0) S' -> program .



state 6

    (18) function_definition -> fname . OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> fname . OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13

    OP_FUNC_ASGN    shift and go to state 25


state 7

    (71) expression -> IDENTIFIER . BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> IDENTIFIER . OP_ASGN rightside
    (73) expression -> IDENTIFIER . OP_ASGN vector_definition M_16
    (20) fname -> IDENTIFIER .
    (37) fname2 -> IDENTIFIER .

    BR_LCSR         shift and go to state 27
    OP_ASGN         shift and go to state 26
    OP_FUNC_ASGN    reduce using rule 20 (fname -> IDENTIFIER .)
    BR_LCIR         reduce using rule 37 (fname2 -> IDENTIFIER .)


state 8

    (13) conditional_statements -> if_statement . start
    (2) start -> . expression_statements
    (3) start -> . loop_statements
    (4) start -> . functions_statements
    (5) start -> . conditional_statements
    (6) start -> .
    (7) expression_statements -> . expression start
    (8) loop_statements -> . while_loop start
    (9) loop_statements -> . for_loop start
    (10) functions_statements -> . function_definition start
    (11) functions_statements -> . function_call start
    (12) conditional_statements -> . if_else_statement start
    (13) conditional_statements -> . if_statement start
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (18) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
    (36) function_call -> . fname2 BR_LCIR arg_to_pass BR_RCIR M_14
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (20) fname -> . IDENTIFIER
    (37) fname2 -> . IDENTIFIER

    $end            reduce using rule 6 (start -> .)
    IDENTIFIER      shift and go to state 7
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_IF      shift and go to state 14

    function_call                  shift and go to state 1
    if_else_statement              shift and go to state 3
    start                          shift and go to state 28
    fname                          shift and go to state 6
    if_statement                   shift and go to state 8
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    conditional_statements         shift and go to state 12
    expression_statements          shift and go to state 13
    function_definition            shift and go to state 15
    loop_statements                shift and go to state 16
    fname2                         shift and go to state 18
    functions_statements           shift and go to state 20
    expression                     shift and go to state 17

state 9

    (16) while_loop -> KEYWORD_WHILE . BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6

    BR_LCIR         shift and go to state 29


state 10

    (9) loop_statements -> for_loop . start
    (2) start -> . expression_statements
    (3) start -> . loop_statements
    (4) start -> . functions_statements
    (5) start -> . conditional_statements
    (6) start -> .
    (7) expression_statements -> . expression start
    (8) loop_statements -> . while_loop start
    (9) loop_statements -> . for_loop start
    (10) functions_statements -> . function_definition start
    (11) functions_statements -> . function_call start
    (12) conditional_statements -> . if_else_statement start
    (13) conditional_statements -> . if_statement start
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (18) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
    (36) function_call -> . fname2 BR_LCIR arg_to_pass BR_RCIR M_14
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (20) fname -> . IDENTIFIER
    (37) fname2 -> . IDENTIFIER

    $end            reduce using rule 6 (start -> .)
    IDENTIFIER      shift and go to state 7
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_IF      shift and go to state 14

    function_call                  shift and go to state 1
    if_else_statement              shift and go to state 3
    start                          shift and go to state 30
    fname                          shift and go to state 6
    if_statement                   shift and go to state 8
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    conditional_statements         shift and go to state 12
    expression_statements          shift and go to state 13
    function_definition            shift and go to state 15
    loop_statements                shift and go to state 16
    fname2                         shift and go to state 18
    functions_statements           shift and go to state 20
    expression                     shift and go to state 17

state 11

    (8) loop_statements -> while_loop . start
    (2) start -> . expression_statements
    (3) start -> . loop_statements
    (4) start -> . functions_statements
    (5) start -> . conditional_statements
    (6) start -> .
    (7) expression_statements -> . expression start
    (8) loop_statements -> . while_loop start
    (9) loop_statements -> . for_loop start
    (10) functions_statements -> . function_definition start
    (11) functions_statements -> . function_call start
    (12) conditional_statements -> . if_else_statement start
    (13) conditional_statements -> . if_statement start
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (18) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
    (36) function_call -> . fname2 BR_LCIR arg_to_pass BR_RCIR M_14
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (20) fname -> . IDENTIFIER
    (37) fname2 -> . IDENTIFIER

    $end            reduce using rule 6 (start -> .)
    IDENTIFIER      shift and go to state 7
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_IF      shift and go to state 14

    function_call                  shift and go to state 1
    if_else_statement              shift and go to state 3
    start                          shift and go to state 31
    fname                          shift and go to state 6
    if_statement                   shift and go to state 8
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    conditional_statements         shift and go to state 12
    expression_statements          shift and go to state 13
    function_definition            shift and go to state 15
    loop_statements                shift and go to state 16
    fname2                         shift and go to state 18
    functions_statements           shift and go to state 20
    expression                     shift and go to state 17

state 12

    (5) start -> conditional_statements .

    $end            reduce using rule 5 (start -> conditional_statements .)


state 13

    (2) start -> expression_statements .

    $end            reduce using rule 2 (start -> expression_statements .)


state 14

    (14) if_else_statement -> KEYWORD_IF . BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> KEYWORD_IF . BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3

    BR_LCIR         shift and go to state 32


state 15

    (10) functions_statements -> function_definition . start
    (2) start -> . expression_statements
    (3) start -> . loop_statements
    (4) start -> . functions_statements
    (5) start -> . conditional_statements
    (6) start -> .
    (7) expression_statements -> . expression start
    (8) loop_statements -> . while_loop start
    (9) loop_statements -> . for_loop start
    (10) functions_statements -> . function_definition start
    (11) functions_statements -> . function_call start
    (12) conditional_statements -> . if_else_statement start
    (13) conditional_statements -> . if_statement start
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (18) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
    (36) function_call -> . fname2 BR_LCIR arg_to_pass BR_RCIR M_14
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (20) fname -> . IDENTIFIER
    (37) fname2 -> . IDENTIFIER

    $end            reduce using rule 6 (start -> .)
    IDENTIFIER      shift and go to state 7
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_IF      shift and go to state 14

    function_call                  shift and go to state 1
    if_else_statement              shift and go to state 3
    start                          shift and go to state 33
    fname                          shift and go to state 6
    if_statement                   shift and go to state 8
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    conditional_statements         shift and go to state 12
    expression_statements          shift and go to state 13
    function_definition            shift and go to state 15
    loop_statements                shift and go to state 16
    fname2                         shift and go to state 18
    functions_statements           shift and go to state 20
    expression                     shift and go to state 17

state 16

    (3) start -> loop_statements .

    $end            reduce using rule 3 (start -> loop_statements .)


state 17

    (7) expression_statements -> expression . start
    (2) start -> . expression_statements
    (3) start -> . loop_statements
    (4) start -> . functions_statements
    (5) start -> . conditional_statements
    (6) start -> .
    (7) expression_statements -> . expression start
    (8) loop_statements -> . while_loop start
    (9) loop_statements -> . for_loop start
    (10) functions_statements -> . function_definition start
    (11) functions_statements -> . function_call start
    (12) conditional_statements -> . if_else_statement start
    (13) conditional_statements -> . if_statement start
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (18) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> . fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13
    (36) function_call -> . fname2 BR_LCIR arg_to_pass BR_RCIR M_14
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (20) fname -> . IDENTIFIER
    (37) fname2 -> . IDENTIFIER

    $end            reduce using rule 6 (start -> .)
    IDENTIFIER      shift and go to state 7
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_IF      shift and go to state 14

    function_call                  shift and go to state 1
    if_else_statement              shift and go to state 3
    start                          shift and go to state 34
    fname                          shift and go to state 6
    if_statement                   shift and go to state 8
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    conditional_statements         shift and go to state 12
    expression_statements          shift and go to state 13
    function_definition            shift and go to state 15
    loop_statements                shift and go to state 16
    fname2                         shift and go to state 18
    functions_statements           shift and go to state 20
    expression                     shift and go to state 17

state 18

    (36) function_call -> fname2 . BR_LCIR arg_to_pass BR_RCIR M_14

    BR_LCIR         shift and go to state 35


state 19

    (17) for_loop -> KEYWORD_FOR . BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8

    BR_LCIR         shift and go to state 36


state 20

    (4) start -> functions_statements .

    $end            reduce using rule 4 (start -> functions_statements .)


state 21

    (75) expression -> KEYWORD_PRINT . BR_LCIR rightside BR_RCIR

    BR_LCIR         shift and go to state 37


state 22

    (11) functions_statements -> function_call start .

    $end            reduce using rule 11 (functions_statements -> function_call start .)


state 23

    (76) expression -> KEYWORD_RETURN BR_LCIR . rightside BR_RCIR
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 38
    any_type                       shift and go to state 44

state 24

    (12) conditional_statements -> if_else_statement start .

    $end            reduce using rule 12 (conditional_statements -> if_else_statement start .)


state 25

    (18) function_definition -> fname OP_FUNC_ASGN . KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> fname OP_FUNC_ASGN . KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13

    KEYWORD_FUNCTION shift and go to state 46


state 26

    (72) expression -> IDENTIFIER OP_ASGN . rightside
    (73) expression -> IDENTIFIER OP_ASGN . vector_definition M_16
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (77) vector_definition -> . KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR
    (78) vector_definition -> . KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    KEYWORD_VECTOR  shift and go to state 49
    KEYWORD_VECTOR_CONSTRUCTOR shift and go to state 48
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 47
    any_type                       shift and go to state 44
    vector_definition              shift and go to state 50

state 27

    (71) expression -> IDENTIFIER BR_LCSR . rightside BR_RCSR OP_ASGN rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 51
    any_type                       shift and go to state 44

state 28

    (13) conditional_statements -> if_statement start .

    $end            reduce using rule 13 (conditional_statements -> if_statement start .)


state 29

    (16) while_loop -> KEYWORD_WHILE BR_LCIR . M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (31) M_4 -> .

    TYPE_BOOLEAN    reduce using rule 31 (M_4 -> .)
    OP_BITNOT       reduce using rule 31 (M_4 -> .)
    IDENTIFIER      reduce using rule 31 (M_4 -> .)
    BR_LCIR         reduce using rule 31 (M_4 -> .)
    TYPE_NUMERIC    reduce using rule 31 (M_4 -> .)
    TYPE_INTEGER    reduce using rule 31 (M_4 -> .)
    TYPE_STRING     reduce using rule 31 (M_4 -> .)

    M_4                            shift and go to state 52

state 30

    (9) loop_statements -> for_loop start .

    $end            reduce using rule 9 (loop_statements -> for_loop start .)


state 31

    (8) loop_statements -> while_loop start .

    $end            reduce using rule 8 (loop_statements -> while_loop start .)


state 32

    (14) if_else_statement -> KEYWORD_IF BR_LCIR . if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> KEYWORD_IF BR_LCIR . if_cond BR_RCIR M_1 compound_statement M_3
    (52) if_cond -> . TYPE_BOOLEAN
    (53) if_cond -> . comparison_statement
    (54) if_cond -> . comparison_statement logop if_cond
    (55) if_cond -> . comparison_statement bitop if_cond
    (56) if_cond -> . OP_BITNOT if_cond
    (57) comparison_statement -> . IDENTIFIER compop any_type
    (58) comparison_statement -> . IDENTIFIER compop IDENTIFIER
    (59) comparison_statement -> . any_type compop any_type
    (60) comparison_statement -> . BR_LCIR if_cond BR_RCIR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    TYPE_BOOLEAN    shift and go to state 54
    OP_BITNOT       shift and go to state 55
    IDENTIFIER      shift and go to state 57
    BR_LCIR         shift and go to state 56
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39

    comparison_statement           shift and go to state 53
    any_type                       shift and go to state 58
    if_cond                        shift and go to state 59

state 33

    (10) functions_statements -> function_definition start .

    $end            reduce using rule 10 (functions_statements -> function_definition start .)


state 34

    (7) expression_statements -> expression start .

    $end            reduce using rule 7 (expression_statements -> expression start .)


state 35

    (36) function_call -> fname2 BR_LCIR . arg_to_pass BR_RCIR M_14
    (39) arg_to_pass -> . arg_to_pass SEP_COMMA arg M_15
    (40) arg_to_pass -> . arg M_15
    (41) arg_to_pass -> .
    (42) arg -> . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    BR_RCIR         reduce using rule 41 (arg_to_pass -> .)
    SEP_COMMA       reduce using rule 41 (arg_to_pass -> .)
    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 60
    arg_to_pass                    shift and go to state 61
    any_type                       shift and go to state 44
    arg                            shift and go to state 62

state 36

    (17) for_loop -> KEYWORD_FOR BR_LCIR . IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8

    IDENTIFIER      shift and go to state 63


state 37

    (75) expression -> KEYWORD_PRINT BR_LCIR . rightside BR_RCIR
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 64
    any_type                       shift and go to state 44

state 38

    (76) expression -> KEYWORD_RETURN BR_LCIR rightside . BR_RCIR
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

    BR_RCIR         shift and go to state 66
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

    math                           shift and go to state 71

state 39

    (102) any_type -> TYPE_STRING .

    OP_BITAND       reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_BITOR        reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_LOGAND       reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_LOGOR        reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_PLUS         reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_MINUS        reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_MULT         reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_DIVIDE       reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_EXPO         reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_REMDR        reduce using rule 102 (any_type -> TYPE_STRING .)
    IDENTIFIER      reduce using rule 102 (any_type -> TYPE_STRING .)
    KEYWORD_PRINT   reduce using rule 102 (any_type -> TYPE_STRING .)
    KEYWORD_RETURN  reduce using rule 102 (any_type -> TYPE_STRING .)
    KEYWORD_WHILE   reduce using rule 102 (any_type -> TYPE_STRING .)
    KEYWORD_FOR     reduce using rule 102 (any_type -> TYPE_STRING .)
    KEYWORD_IF      reduce using rule 102 (any_type -> TYPE_STRING .)
    $end            reduce using rule 102 (any_type -> TYPE_STRING .)
    BR_RCUR         reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_GREAT        reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_LESS         reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_LEEQ         reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_GREQ         reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_NOEQ         reduce using rule 102 (any_type -> TYPE_STRING .)
    OP_COMP         reduce using rule 102 (any_type -> TYPE_STRING .)
    BR_RCSR         reduce using rule 102 (any_type -> TYPE_STRING .)
    BR_RCIR         reduce using rule 102 (any_type -> TYPE_STRING .)
    SEP_COMMA       reduce using rule 102 (any_type -> TYPE_STRING .)


state 40

    (100) any_type -> TYPE_NUMERIC .

    OP_BITAND       reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_BITOR        reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_LOGAND       reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_LOGOR        reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_PLUS         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_MINUS        reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_MULT         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_DIVIDE       reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_EXPO         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_REMDR        reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    IDENTIFIER      reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    KEYWORD_PRINT   reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    KEYWORD_RETURN  reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    KEYWORD_WHILE   reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    KEYWORD_FOR     reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    KEYWORD_IF      reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    $end            reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    BR_RCUR         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_GREAT        reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_LESS         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_LEEQ         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_GREQ         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_NOEQ         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    OP_COMP         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    BR_RCSR         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    BR_RCIR         reduce using rule 100 (any_type -> TYPE_NUMERIC .)
    SEP_COMMA       reduce using rule 100 (any_type -> TYPE_NUMERIC .)


state 41

    (103) any_type -> TYPE_BOOLEAN .

    OP_BITAND       reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_BITOR        reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_LOGAND       reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_LOGOR        reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_PLUS         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_MINUS        reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_MULT         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_DIVIDE       reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_EXPO         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_REMDR        reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    IDENTIFIER      reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    KEYWORD_PRINT   reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    KEYWORD_RETURN  reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    KEYWORD_WHILE   reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    KEYWORD_FOR     reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    KEYWORD_IF      reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    $end            reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    BR_RCUR         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    BR_RCSR         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    BR_RCIR         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    SEP_COMMA       reduce using rule 103 (any_type -> TYPE_BOOLEAN .)


state 42

    (101) any_type -> TYPE_INTEGER .

    OP_BITAND       reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_BITOR        reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_LOGAND       reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_LOGOR        reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_PLUS         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_MINUS        reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_MULT         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_DIVIDE       reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_EXPO         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_REMDR        reduce using rule 101 (any_type -> TYPE_INTEGER .)
    IDENTIFIER      reduce using rule 101 (any_type -> TYPE_INTEGER .)
    KEYWORD_PRINT   reduce using rule 101 (any_type -> TYPE_INTEGER .)
    KEYWORD_RETURN  reduce using rule 101 (any_type -> TYPE_INTEGER .)
    KEYWORD_WHILE   reduce using rule 101 (any_type -> TYPE_INTEGER .)
    KEYWORD_FOR     reduce using rule 101 (any_type -> TYPE_INTEGER .)
    KEYWORD_IF      reduce using rule 101 (any_type -> TYPE_INTEGER .)
    $end            reduce using rule 101 (any_type -> TYPE_INTEGER .)
    BR_RCUR         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_GREAT        reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_LESS         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_LEEQ         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_GREQ         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_NOEQ         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    OP_COMP         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    BR_RCSR         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    BR_RCIR         reduce using rule 101 (any_type -> TYPE_INTEGER .)
    SEP_COMMA       reduce using rule 101 (any_type -> TYPE_INTEGER .)


state 43

    (83) rightside -> BR_LCIR . rightside BR_RCIR
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 73
    any_type                       shift and go to state 44

state 44

    (84) rightside -> any_type . bitop rightside
    (85) rightside -> any_type . logop rightside
    (89) rightside -> any_type .
    (63) bitop -> . OP_BITAND
    (64) bitop -> . OP_BITOR
    (61) logop -> . OP_LOGAND
    (62) logop -> . OP_LOGOR

    OP_PLUS         reduce using rule 89 (rightside -> any_type .)
    OP_MINUS        reduce using rule 89 (rightside -> any_type .)
    OP_MULT         reduce using rule 89 (rightside -> any_type .)
    OP_DIVIDE       reduce using rule 89 (rightside -> any_type .)
    OP_EXPO         reduce using rule 89 (rightside -> any_type .)
    OP_REMDR        reduce using rule 89 (rightside -> any_type .)
    BR_RCIR         reduce using rule 89 (rightside -> any_type .)
    IDENTIFIER      reduce using rule 89 (rightside -> any_type .)
    KEYWORD_PRINT   reduce using rule 89 (rightside -> any_type .)
    KEYWORD_RETURN  reduce using rule 89 (rightside -> any_type .)
    KEYWORD_WHILE   reduce using rule 89 (rightside -> any_type .)
    KEYWORD_FOR     reduce using rule 89 (rightside -> any_type .)
    KEYWORD_IF      reduce using rule 89 (rightside -> any_type .)
    $end            reduce using rule 89 (rightside -> any_type .)
    BR_RCUR         reduce using rule 89 (rightside -> any_type .)
    BR_RCSR         reduce using rule 89 (rightside -> any_type .)
    SEP_COMMA       reduce using rule 89 (rightside -> any_type .)
    OP_BITAND       shift and go to state 79
    OP_BITOR        shift and go to state 78
    OP_LOGAND       shift and go to state 76
    OP_LOGOR        shift and go to state 74

    bitop                          shift and go to state 77
    logop                          shift and go to state 75

state 45

    (82) rightside -> IDENTIFIER . math rightside
    (86) rightside -> IDENTIFIER . bitop rightside
    (87) rightside -> IDENTIFIER . logop rightside
    (88) rightside -> IDENTIFIER .
    (90) rightside -> IDENTIFIER . BR_LCSR rightside BR_RCSR
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR
    (63) bitop -> . OP_BITAND
    (64) bitop -> . OP_BITOR
    (61) logop -> . OP_LOGAND
    (62) logop -> . OP_LOGOR

  ! shift/reduce conflict for OP_PLUS resolved as shift
  ! shift/reduce conflict for OP_MINUS resolved as shift
  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIVIDE resolved as shift
  ! shift/reduce conflict for OP_EXPO resolved as shift
  ! shift/reduce conflict for OP_REMDR resolved as shift
    BR_RCIR         reduce using rule 88 (rightside -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 88 (rightside -> IDENTIFIER .)
    KEYWORD_PRINT   reduce using rule 88 (rightside -> IDENTIFIER .)
    KEYWORD_RETURN  reduce using rule 88 (rightside -> IDENTIFIER .)
    KEYWORD_WHILE   reduce using rule 88 (rightside -> IDENTIFIER .)
    KEYWORD_FOR     reduce using rule 88 (rightside -> IDENTIFIER .)
    KEYWORD_IF      reduce using rule 88 (rightside -> IDENTIFIER .)
    $end            reduce using rule 88 (rightside -> IDENTIFIER .)
    BR_RCUR         reduce using rule 88 (rightside -> IDENTIFIER .)
    BR_RCSR         reduce using rule 88 (rightside -> IDENTIFIER .)
    SEP_COMMA       reduce using rule 88 (rightside -> IDENTIFIER .)
    BR_LCSR         shift and go to state 81
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67
    OP_BITAND       shift and go to state 79
    OP_BITOR        shift and go to state 78
    OP_LOGAND       shift and go to state 76
    OP_LOGOR        shift and go to state 74

  ! OP_PLUS         [ reduce using rule 88 (rightside -> IDENTIFIER .) ]
  ! OP_MINUS        [ reduce using rule 88 (rightside -> IDENTIFIER .) ]
  ! OP_MULT         [ reduce using rule 88 (rightside -> IDENTIFIER .) ]
  ! OP_DIVIDE       [ reduce using rule 88 (rightside -> IDENTIFIER .) ]
  ! OP_EXPO         [ reduce using rule 88 (rightside -> IDENTIFIER .) ]
  ! OP_REMDR        [ reduce using rule 88 (rightside -> IDENTIFIER .) ]

    bitop                          shift and go to state 82
    logop                          shift and go to state 80
    math                           shift and go to state 83

state 46

    (18) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION . BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION . BR_LCIR BR_RCIR M_12 compound_statement M_13

    BR_LCIR         shift and go to state 84


state 47

    (72) expression -> IDENTIFIER OP_ASGN rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

    BR_RCUR         reduce using rule 72 (expression -> IDENTIFIER OP_ASGN rightside .)
    IDENTIFIER      reduce using rule 72 (expression -> IDENTIFIER OP_ASGN rightside .)
    KEYWORD_PRINT   reduce using rule 72 (expression -> IDENTIFIER OP_ASGN rightside .)
    KEYWORD_RETURN  reduce using rule 72 (expression -> IDENTIFIER OP_ASGN rightside .)
    KEYWORD_FOR     reduce using rule 72 (expression -> IDENTIFIER OP_ASGN rightside .)
    KEYWORD_WHILE   reduce using rule 72 (expression -> IDENTIFIER OP_ASGN rightside .)
    KEYWORD_IF      reduce using rule 72 (expression -> IDENTIFIER OP_ASGN rightside .)
    $end            reduce using rule 72 (expression -> IDENTIFIER OP_ASGN rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

    math                           shift and go to state 71

state 48

    (78) vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR . BR_LCIR vector_elements BR_RCIR

    BR_LCIR         shift and go to state 85


state 49

    (77) vector_definition -> KEYWORD_VECTOR . BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR

    BR_LCIR         shift and go to state 86


state 50

    (73) expression -> IDENTIFIER OP_ASGN vector_definition . M_16
    (74) M_16 -> .

    IDENTIFIER      reduce using rule 74 (M_16 -> .)
    KEYWORD_PRINT   reduce using rule 74 (M_16 -> .)
    KEYWORD_RETURN  reduce using rule 74 (M_16 -> .)
    KEYWORD_WHILE   reduce using rule 74 (M_16 -> .)
    KEYWORD_FOR     reduce using rule 74 (M_16 -> .)
    KEYWORD_IF      reduce using rule 74 (M_16 -> .)
    $end            reduce using rule 74 (M_16 -> .)
    BR_RCUR         reduce using rule 74 (M_16 -> .)

    M_16                           shift and go to state 87

state 51

    (71) expression -> IDENTIFIER BR_LCSR rightside . BR_RCSR OP_ASGN rightside
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

    BR_RCSR         shift and go to state 88
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

    math                           shift and go to state 71

state 52

    (16) while_loop -> KEYWORD_WHILE BR_LCIR M_4 . if_cond BR_RCIR M_5 compound_statement M_6
    (52) if_cond -> . TYPE_BOOLEAN
    (53) if_cond -> . comparison_statement
    (54) if_cond -> . comparison_statement logop if_cond
    (55) if_cond -> . comparison_statement bitop if_cond
    (56) if_cond -> . OP_BITNOT if_cond
    (57) comparison_statement -> . IDENTIFIER compop any_type
    (58) comparison_statement -> . IDENTIFIER compop IDENTIFIER
    (59) comparison_statement -> . any_type compop any_type
    (60) comparison_statement -> . BR_LCIR if_cond BR_RCIR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    TYPE_BOOLEAN    shift and go to state 54
    OP_BITNOT       shift and go to state 55
    IDENTIFIER      shift and go to state 57
    BR_LCIR         shift and go to state 56
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39

    comparison_statement           shift and go to state 53
    any_type                       shift and go to state 58
    if_cond                        shift and go to state 89

state 53

    (53) if_cond -> comparison_statement .
    (54) if_cond -> comparison_statement . logop if_cond
    (55) if_cond -> comparison_statement . bitop if_cond
    (61) logop -> . OP_LOGAND
    (62) logop -> . OP_LOGOR
    (63) bitop -> . OP_BITAND
    (64) bitop -> . OP_BITOR

    BR_RCIR         reduce using rule 53 (if_cond -> comparison_statement .)
    OP_LOGAND       shift and go to state 76
    OP_LOGOR        shift and go to state 74
    OP_BITAND       shift and go to state 79
    OP_BITOR        shift and go to state 78

    bitop                          shift and go to state 91
    logop                          shift and go to state 90

state 54

    (52) if_cond -> TYPE_BOOLEAN .
    (103) any_type -> TYPE_BOOLEAN .

    BR_RCIR         reduce using rule 52 (if_cond -> TYPE_BOOLEAN .)
    OP_GREAT        reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_LESS         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_LEEQ         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_GREQ         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_NOEQ         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)
    OP_COMP         reduce using rule 103 (any_type -> TYPE_BOOLEAN .)


state 55

    (56) if_cond -> OP_BITNOT . if_cond
    (52) if_cond -> . TYPE_BOOLEAN
    (53) if_cond -> . comparison_statement
    (54) if_cond -> . comparison_statement logop if_cond
    (55) if_cond -> . comparison_statement bitop if_cond
    (56) if_cond -> . OP_BITNOT if_cond
    (57) comparison_statement -> . IDENTIFIER compop any_type
    (58) comparison_statement -> . IDENTIFIER compop IDENTIFIER
    (59) comparison_statement -> . any_type compop any_type
    (60) comparison_statement -> . BR_LCIR if_cond BR_RCIR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    TYPE_BOOLEAN    shift and go to state 54
    OP_BITNOT       shift and go to state 55
    IDENTIFIER      shift and go to state 57
    BR_LCIR         shift and go to state 56
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39

    comparison_statement           shift and go to state 53
    any_type                       shift and go to state 58
    if_cond                        shift and go to state 92

state 56

    (60) comparison_statement -> BR_LCIR . if_cond BR_RCIR
    (52) if_cond -> . TYPE_BOOLEAN
    (53) if_cond -> . comparison_statement
    (54) if_cond -> . comparison_statement logop if_cond
    (55) if_cond -> . comparison_statement bitop if_cond
    (56) if_cond -> . OP_BITNOT if_cond
    (57) comparison_statement -> . IDENTIFIER compop any_type
    (58) comparison_statement -> . IDENTIFIER compop IDENTIFIER
    (59) comparison_statement -> . any_type compop any_type
    (60) comparison_statement -> . BR_LCIR if_cond BR_RCIR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    TYPE_BOOLEAN    shift and go to state 54
    OP_BITNOT       shift and go to state 55
    IDENTIFIER      shift and go to state 57
    BR_LCIR         shift and go to state 56
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39

    comparison_statement           shift and go to state 53
    any_type                       shift and go to state 58
    if_cond                        shift and go to state 93

state 57

    (57) comparison_statement -> IDENTIFIER . compop any_type
    (58) comparison_statement -> IDENTIFIER . compop IDENTIFIER
    (65) compop -> . OP_GREAT
    (66) compop -> . OP_LESS
    (67) compop -> . OP_LEEQ
    (68) compop -> . OP_GREQ
    (69) compop -> . OP_NOEQ
    (70) compop -> . OP_COMP

    OP_GREAT        shift and go to state 99
    OP_LESS         shift and go to state 94
    OP_LEEQ         shift and go to state 100
    OP_GREQ         shift and go to state 95
    OP_NOEQ         shift and go to state 97
    OP_COMP         shift and go to state 98

    compop                         shift and go to state 96

state 58

    (59) comparison_statement -> any_type . compop any_type
    (65) compop -> . OP_GREAT
    (66) compop -> . OP_LESS
    (67) compop -> . OP_LEEQ
    (68) compop -> . OP_GREQ
    (69) compop -> . OP_NOEQ
    (70) compop -> . OP_COMP

    OP_GREAT        shift and go to state 99
    OP_LESS         shift and go to state 94
    OP_LEEQ         shift and go to state 100
    OP_GREQ         shift and go to state 95
    OP_NOEQ         shift and go to state 97
    OP_COMP         shift and go to state 98

    compop                         shift and go to state 101

state 59

    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond . BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond . BR_RCIR M_1 compound_statement M_3

    BR_RCIR         shift and go to state 102


state 60

    (42) arg -> rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

    BR_RCIR         reduce using rule 42 (arg -> rightside .)
    SEP_COMMA       reduce using rule 42 (arg -> rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

    math                           shift and go to state 71

state 61

    (36) function_call -> fname2 BR_LCIR arg_to_pass . BR_RCIR M_14
    (39) arg_to_pass -> arg_to_pass . SEP_COMMA arg M_15

    BR_RCIR         shift and go to state 103
    SEP_COMMA       shift and go to state 104


state 62

    (40) arg_to_pass -> arg . M_15
    (43) M_15 -> .

    BR_RCIR         reduce using rule 43 (M_15 -> .)
    SEP_COMMA       reduce using rule 43 (M_15 -> .)

    M_15                           shift and go to state 105

state 63

    (17) for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER . KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8

    KEYWORD_IN      shift and go to state 106


state 64

    (75) expression -> KEYWORD_PRINT BR_LCIR rightside . BR_RCIR
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

    BR_RCIR         shift and go to state 107
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

    math                           shift and go to state 71

state 65

    (93) math -> OP_MULT .

    IDENTIFIER      reduce using rule 93 (math -> OP_MULT .)
    BR_LCIR         reduce using rule 93 (math -> OP_MULT .)
    TYPE_NUMERIC    reduce using rule 93 (math -> OP_MULT .)
    TYPE_INTEGER    reduce using rule 93 (math -> OP_MULT .)
    TYPE_STRING     reduce using rule 93 (math -> OP_MULT .)
    TYPE_BOOLEAN    reduce using rule 93 (math -> OP_MULT .)


state 66

    (76) expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .

    BR_RCUR         reduce using rule 76 (expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .)
    IDENTIFIER      reduce using rule 76 (expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .)
    KEYWORD_PRINT   reduce using rule 76 (expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .)
    KEYWORD_RETURN  reduce using rule 76 (expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .)
    KEYWORD_FOR     reduce using rule 76 (expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .)
    KEYWORD_WHILE   reduce using rule 76 (expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .)
    KEYWORD_IF      reduce using rule 76 (expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .)
    $end            reduce using rule 76 (expression -> KEYWORD_RETURN BR_LCIR rightside BR_RCIR .)


state 67

    (96) math -> OP_REMDR .

    IDENTIFIER      reduce using rule 96 (math -> OP_REMDR .)
    BR_LCIR         reduce using rule 96 (math -> OP_REMDR .)
    TYPE_NUMERIC    reduce using rule 96 (math -> OP_REMDR .)
    TYPE_INTEGER    reduce using rule 96 (math -> OP_REMDR .)
    TYPE_STRING     reduce using rule 96 (math -> OP_REMDR .)
    TYPE_BOOLEAN    reduce using rule 96 (math -> OP_REMDR .)


state 68

    (94) math -> OP_DIVIDE .

    IDENTIFIER      reduce using rule 94 (math -> OP_DIVIDE .)
    BR_LCIR         reduce using rule 94 (math -> OP_DIVIDE .)
    TYPE_NUMERIC    reduce using rule 94 (math -> OP_DIVIDE .)
    TYPE_INTEGER    reduce using rule 94 (math -> OP_DIVIDE .)
    TYPE_STRING     reduce using rule 94 (math -> OP_DIVIDE .)
    TYPE_BOOLEAN    reduce using rule 94 (math -> OP_DIVIDE .)


state 69

    (91) math -> OP_PLUS .

    IDENTIFIER      reduce using rule 91 (math -> OP_PLUS .)
    BR_LCIR         reduce using rule 91 (math -> OP_PLUS .)
    TYPE_NUMERIC    reduce using rule 91 (math -> OP_PLUS .)
    TYPE_INTEGER    reduce using rule 91 (math -> OP_PLUS .)
    TYPE_STRING     reduce using rule 91 (math -> OP_PLUS .)
    TYPE_BOOLEAN    reduce using rule 91 (math -> OP_PLUS .)


state 70

    (92) math -> OP_MINUS .

    IDENTIFIER      reduce using rule 92 (math -> OP_MINUS .)
    BR_LCIR         reduce using rule 92 (math -> OP_MINUS .)
    TYPE_NUMERIC    reduce using rule 92 (math -> OP_MINUS .)
    TYPE_INTEGER    reduce using rule 92 (math -> OP_MINUS .)
    TYPE_STRING     reduce using rule 92 (math -> OP_MINUS .)
    TYPE_BOOLEAN    reduce using rule 92 (math -> OP_MINUS .)


state 71

    (81) rightside -> rightside math . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 108
    any_type                       shift and go to state 44

state 72

    (95) math -> OP_EXPO .

    IDENTIFIER      reduce using rule 95 (math -> OP_EXPO .)
    BR_LCIR         reduce using rule 95 (math -> OP_EXPO .)
    TYPE_NUMERIC    reduce using rule 95 (math -> OP_EXPO .)
    TYPE_INTEGER    reduce using rule 95 (math -> OP_EXPO .)
    TYPE_STRING     reduce using rule 95 (math -> OP_EXPO .)
    TYPE_BOOLEAN    reduce using rule 95 (math -> OP_EXPO .)


state 73

    (83) rightside -> BR_LCIR rightside . BR_RCIR
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

    BR_RCIR         shift and go to state 109
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

    math                           shift and go to state 71

state 74

    (62) logop -> OP_LOGOR .

    TYPE_BOOLEAN    reduce using rule 62 (logop -> OP_LOGOR .)
    OP_BITNOT       reduce using rule 62 (logop -> OP_LOGOR .)
    IDENTIFIER      reduce using rule 62 (logop -> OP_LOGOR .)
    BR_LCIR         reduce using rule 62 (logop -> OP_LOGOR .)
    TYPE_NUMERIC    reduce using rule 62 (logop -> OP_LOGOR .)
    TYPE_INTEGER    reduce using rule 62 (logop -> OP_LOGOR .)
    TYPE_STRING     reduce using rule 62 (logop -> OP_LOGOR .)


state 75

    (85) rightside -> any_type logop . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 110
    any_type                       shift and go to state 44

state 76

    (61) logop -> OP_LOGAND .

    TYPE_BOOLEAN    reduce using rule 61 (logop -> OP_LOGAND .)
    OP_BITNOT       reduce using rule 61 (logop -> OP_LOGAND .)
    IDENTIFIER      reduce using rule 61 (logop -> OP_LOGAND .)
    BR_LCIR         reduce using rule 61 (logop -> OP_LOGAND .)
    TYPE_NUMERIC    reduce using rule 61 (logop -> OP_LOGAND .)
    TYPE_INTEGER    reduce using rule 61 (logop -> OP_LOGAND .)
    TYPE_STRING     reduce using rule 61 (logop -> OP_LOGAND .)


state 77

    (84) rightside -> any_type bitop . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 111
    any_type                       shift and go to state 44

state 78

    (64) bitop -> OP_BITOR .

    IDENTIFIER      reduce using rule 64 (bitop -> OP_BITOR .)
    BR_LCIR         reduce using rule 64 (bitop -> OP_BITOR .)
    TYPE_NUMERIC    reduce using rule 64 (bitop -> OP_BITOR .)
    TYPE_INTEGER    reduce using rule 64 (bitop -> OP_BITOR .)
    TYPE_STRING     reduce using rule 64 (bitop -> OP_BITOR .)
    TYPE_BOOLEAN    reduce using rule 64 (bitop -> OP_BITOR .)
    OP_BITNOT       reduce using rule 64 (bitop -> OP_BITOR .)


state 79

    (63) bitop -> OP_BITAND .

    IDENTIFIER      reduce using rule 63 (bitop -> OP_BITAND .)
    BR_LCIR         reduce using rule 63 (bitop -> OP_BITAND .)
    TYPE_NUMERIC    reduce using rule 63 (bitop -> OP_BITAND .)
    TYPE_INTEGER    reduce using rule 63 (bitop -> OP_BITAND .)
    TYPE_STRING     reduce using rule 63 (bitop -> OP_BITAND .)
    TYPE_BOOLEAN    reduce using rule 63 (bitop -> OP_BITAND .)
    OP_BITNOT       reduce using rule 63 (bitop -> OP_BITAND .)


state 80

    (87) rightside -> IDENTIFIER logop . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 112
    any_type                       shift and go to state 44

state 81

    (90) rightside -> IDENTIFIER BR_LCSR . rightside BR_RCSR
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 113
    any_type                       shift and go to state 44

state 82

    (86) rightside -> IDENTIFIER bitop . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 114
    any_type                       shift and go to state 44

state 83

    (82) rightside -> IDENTIFIER math . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 115
    any_type                       shift and go to state 44

state 84

    (18) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR . arg_list M_10 BR_RCIR compound_statement M_11
    (19) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR . BR_RCIR M_12 compound_statement M_13
    (21) arg_list -> . IDENTIFIER M_9 SEP_COMMA arg_list
    (22) arg_list -> . IDENTIFIER M_9

    BR_RCIR         shift and go to state 117
    IDENTIFIER      shift and go to state 116

    arg_list                       shift and go to state 118

state 85

    (78) vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR . vector_elements BR_RCIR
    (79) vector_elements -> . vector_elements SEP_COMMA TYPE_INTEGER
    (80) vector_elements -> . TYPE_INTEGER

    TYPE_INTEGER    shift and go to state 120

    vector_elements                shift and go to state 119

state 86

    (77) vector_definition -> KEYWORD_VECTOR BR_LCIR . SEP_COMMA TYPE_INTEGER BR_RCIR

    SEP_COMMA       shift and go to state 121


state 87

    (73) expression -> IDENTIFIER OP_ASGN vector_definition M_16 .

    BR_RCUR         reduce using rule 73 (expression -> IDENTIFIER OP_ASGN vector_definition M_16 .)
    IDENTIFIER      reduce using rule 73 (expression -> IDENTIFIER OP_ASGN vector_definition M_16 .)
    KEYWORD_PRINT   reduce using rule 73 (expression -> IDENTIFIER OP_ASGN vector_definition M_16 .)
    KEYWORD_RETURN  reduce using rule 73 (expression -> IDENTIFIER OP_ASGN vector_definition M_16 .)
    KEYWORD_FOR     reduce using rule 73 (expression -> IDENTIFIER OP_ASGN vector_definition M_16 .)
    KEYWORD_WHILE   reduce using rule 73 (expression -> IDENTIFIER OP_ASGN vector_definition M_16 .)
    KEYWORD_IF      reduce using rule 73 (expression -> IDENTIFIER OP_ASGN vector_definition M_16 .)
    $end            reduce using rule 73 (expression -> IDENTIFIER OP_ASGN vector_definition M_16 .)


state 88

    (71) expression -> IDENTIFIER BR_LCSR rightside BR_RCSR . OP_ASGN rightside

    OP_ASGN         shift and go to state 122


state 89

    (16) while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond . BR_RCIR M_5 compound_statement M_6

    BR_RCIR         shift and go to state 123


state 90

    (54) if_cond -> comparison_statement logop . if_cond
    (52) if_cond -> . TYPE_BOOLEAN
    (53) if_cond -> . comparison_statement
    (54) if_cond -> . comparison_statement logop if_cond
    (55) if_cond -> . comparison_statement bitop if_cond
    (56) if_cond -> . OP_BITNOT if_cond
    (57) comparison_statement -> . IDENTIFIER compop any_type
    (58) comparison_statement -> . IDENTIFIER compop IDENTIFIER
    (59) comparison_statement -> . any_type compop any_type
    (60) comparison_statement -> . BR_LCIR if_cond BR_RCIR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    TYPE_BOOLEAN    shift and go to state 54
    OP_BITNOT       shift and go to state 55
    IDENTIFIER      shift and go to state 57
    BR_LCIR         shift and go to state 56
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39

    comparison_statement           shift and go to state 53
    any_type                       shift and go to state 58
    if_cond                        shift and go to state 124

state 91

    (55) if_cond -> comparison_statement bitop . if_cond
    (52) if_cond -> . TYPE_BOOLEAN
    (53) if_cond -> . comparison_statement
    (54) if_cond -> . comparison_statement logop if_cond
    (55) if_cond -> . comparison_statement bitop if_cond
    (56) if_cond -> . OP_BITNOT if_cond
    (57) comparison_statement -> . IDENTIFIER compop any_type
    (58) comparison_statement -> . IDENTIFIER compop IDENTIFIER
    (59) comparison_statement -> . any_type compop any_type
    (60) comparison_statement -> . BR_LCIR if_cond BR_RCIR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    TYPE_BOOLEAN    shift and go to state 54
    OP_BITNOT       shift and go to state 55
    IDENTIFIER      shift and go to state 57
    BR_LCIR         shift and go to state 56
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39

    comparison_statement           shift and go to state 53
    any_type                       shift and go to state 58
    if_cond                        shift and go to state 125

state 92

    (56) if_cond -> OP_BITNOT if_cond .

    BR_RCIR         reduce using rule 56 (if_cond -> OP_BITNOT if_cond .)


state 93

    (60) comparison_statement -> BR_LCIR if_cond . BR_RCIR

    BR_RCIR         shift and go to state 126


state 94

    (66) compop -> OP_LESS .

    IDENTIFIER      reduce using rule 66 (compop -> OP_LESS .)
    TYPE_NUMERIC    reduce using rule 66 (compop -> OP_LESS .)
    TYPE_INTEGER    reduce using rule 66 (compop -> OP_LESS .)
    TYPE_STRING     reduce using rule 66 (compop -> OP_LESS .)
    TYPE_BOOLEAN    reduce using rule 66 (compop -> OP_LESS .)


state 95

    (68) compop -> OP_GREQ .

    IDENTIFIER      reduce using rule 68 (compop -> OP_GREQ .)
    TYPE_NUMERIC    reduce using rule 68 (compop -> OP_GREQ .)
    TYPE_INTEGER    reduce using rule 68 (compop -> OP_GREQ .)
    TYPE_STRING     reduce using rule 68 (compop -> OP_GREQ .)
    TYPE_BOOLEAN    reduce using rule 68 (compop -> OP_GREQ .)


state 96

    (57) comparison_statement -> IDENTIFIER compop . any_type
    (58) comparison_statement -> IDENTIFIER compop . IDENTIFIER
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 128
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    any_type                       shift and go to state 127

state 97

    (69) compop -> OP_NOEQ .

    IDENTIFIER      reduce using rule 69 (compop -> OP_NOEQ .)
    TYPE_NUMERIC    reduce using rule 69 (compop -> OP_NOEQ .)
    TYPE_INTEGER    reduce using rule 69 (compop -> OP_NOEQ .)
    TYPE_STRING     reduce using rule 69 (compop -> OP_NOEQ .)
    TYPE_BOOLEAN    reduce using rule 69 (compop -> OP_NOEQ .)


state 98

    (70) compop -> OP_COMP .

    IDENTIFIER      reduce using rule 70 (compop -> OP_COMP .)
    TYPE_NUMERIC    reduce using rule 70 (compop -> OP_COMP .)
    TYPE_INTEGER    reduce using rule 70 (compop -> OP_COMP .)
    TYPE_STRING     reduce using rule 70 (compop -> OP_COMP .)
    TYPE_BOOLEAN    reduce using rule 70 (compop -> OP_COMP .)


state 99

    (65) compop -> OP_GREAT .

    IDENTIFIER      reduce using rule 65 (compop -> OP_GREAT .)
    TYPE_NUMERIC    reduce using rule 65 (compop -> OP_GREAT .)
    TYPE_INTEGER    reduce using rule 65 (compop -> OP_GREAT .)
    TYPE_STRING     reduce using rule 65 (compop -> OP_GREAT .)
    TYPE_BOOLEAN    reduce using rule 65 (compop -> OP_GREAT .)


state 100

    (67) compop -> OP_LEEQ .

    IDENTIFIER      reduce using rule 67 (compop -> OP_LEEQ .)
    TYPE_NUMERIC    reduce using rule 67 (compop -> OP_LEEQ .)
    TYPE_INTEGER    reduce using rule 67 (compop -> OP_LEEQ .)
    TYPE_STRING     reduce using rule 67 (compop -> OP_LEEQ .)
    TYPE_BOOLEAN    reduce using rule 67 (compop -> OP_LEEQ .)


state 101

    (59) comparison_statement -> any_type compop . any_type
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    any_type                       shift and go to state 129

state 102

    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR . M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR . M_1 compound_statement M_3
    (28) M_1 -> .

    BR_LCUR         reduce using rule 28 (M_1 -> .)

    M_1                            shift and go to state 130

state 103

    (36) function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR . M_14
    (38) M_14 -> .

    IDENTIFIER      reduce using rule 38 (M_14 -> .)
    KEYWORD_PRINT   reduce using rule 38 (M_14 -> .)
    KEYWORD_RETURN  reduce using rule 38 (M_14 -> .)
    KEYWORD_WHILE   reduce using rule 38 (M_14 -> .)
    KEYWORD_FOR     reduce using rule 38 (M_14 -> .)
    KEYWORD_IF      reduce using rule 38 (M_14 -> .)
    $end            reduce using rule 38 (M_14 -> .)

    M_14                           shift and go to state 131

state 104

    (39) arg_to_pass -> arg_to_pass SEP_COMMA . arg M_15
    (42) arg -> . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 60
    any_type                       shift and go to state 44
    arg                            shift and go to state 132

state 105

    (40) arg_to_pass -> arg M_15 .

    BR_RCIR         reduce using rule 40 (arg_to_pass -> arg M_15 .)
    SEP_COMMA       reduce using rule 40 (arg_to_pass -> arg M_15 .)


state 106

    (17) for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN . for_range BR_RCIR M_7 compound_statement M_8
    (97) for_range -> . for_range_variables SEP_COLON for_range_variables
    (98) for_range_variables -> . IDENTIFIER
    (99) for_range_variables -> . TYPE_INTEGER

    IDENTIFIER      shift and go to state 136
    TYPE_INTEGER    shift and go to state 133

    for_range_variables            shift and go to state 135
    for_range                      shift and go to state 134

state 107

    (75) expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .

    BR_RCUR         reduce using rule 75 (expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .)
    IDENTIFIER      reduce using rule 75 (expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .)
    KEYWORD_PRINT   reduce using rule 75 (expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .)
    KEYWORD_RETURN  reduce using rule 75 (expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .)
    KEYWORD_FOR     reduce using rule 75 (expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .)
    KEYWORD_WHILE   reduce using rule 75 (expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .)
    KEYWORD_IF      reduce using rule 75 (expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .)
    $end            reduce using rule 75 (expression -> KEYWORD_PRINT BR_LCIR rightside BR_RCIR .)


state 108

    (81) rightside -> rightside math rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

  ! shift/reduce conflict for OP_PLUS resolved as shift
  ! shift/reduce conflict for OP_MINUS resolved as shift
  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIVIDE resolved as shift
  ! shift/reduce conflict for OP_EXPO resolved as shift
  ! shift/reduce conflict for OP_REMDR resolved as shift
    BR_RCIR         reduce using rule 81 (rightside -> rightside math rightside .)
    IDENTIFIER      reduce using rule 81 (rightside -> rightside math rightside .)
    KEYWORD_PRINT   reduce using rule 81 (rightside -> rightside math rightside .)
    KEYWORD_RETURN  reduce using rule 81 (rightside -> rightside math rightside .)
    KEYWORD_WHILE   reduce using rule 81 (rightside -> rightside math rightside .)
    KEYWORD_FOR     reduce using rule 81 (rightside -> rightside math rightside .)
    KEYWORD_IF      reduce using rule 81 (rightside -> rightside math rightside .)
    $end            reduce using rule 81 (rightside -> rightside math rightside .)
    BR_RCUR         reduce using rule 81 (rightside -> rightside math rightside .)
    BR_RCSR         reduce using rule 81 (rightside -> rightside math rightside .)
    SEP_COMMA       reduce using rule 81 (rightside -> rightside math rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

  ! OP_PLUS         [ reduce using rule 81 (rightside -> rightside math rightside .) ]
  ! OP_MINUS        [ reduce using rule 81 (rightside -> rightside math rightside .) ]
  ! OP_MULT         [ reduce using rule 81 (rightside -> rightside math rightside .) ]
  ! OP_DIVIDE       [ reduce using rule 81 (rightside -> rightside math rightside .) ]
  ! OP_EXPO         [ reduce using rule 81 (rightside -> rightside math rightside .) ]
  ! OP_REMDR        [ reduce using rule 81 (rightside -> rightside math rightside .) ]

    math                           shift and go to state 71

state 109

    (83) rightside -> BR_LCIR rightside BR_RCIR .

    OP_PLUS         reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    OP_MINUS        reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    OP_MULT         reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    OP_DIVIDE       reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    OP_EXPO         reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    OP_REMDR        reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    BR_RCIR         reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    IDENTIFIER      reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    KEYWORD_PRINT   reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    KEYWORD_RETURN  reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    KEYWORD_WHILE   reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    KEYWORD_FOR     reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    KEYWORD_IF      reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    $end            reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    BR_RCUR         reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    BR_RCSR         reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)
    SEP_COMMA       reduce using rule 83 (rightside -> BR_LCIR rightside BR_RCIR .)


state 110

    (85) rightside -> any_type logop rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

  ! shift/reduce conflict for OP_PLUS resolved as shift
  ! shift/reduce conflict for OP_MINUS resolved as shift
  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIVIDE resolved as shift
  ! shift/reduce conflict for OP_EXPO resolved as shift
  ! shift/reduce conflict for OP_REMDR resolved as shift
    BR_RCIR         reduce using rule 85 (rightside -> any_type logop rightside .)
    IDENTIFIER      reduce using rule 85 (rightside -> any_type logop rightside .)
    KEYWORD_PRINT   reduce using rule 85 (rightside -> any_type logop rightside .)
    KEYWORD_RETURN  reduce using rule 85 (rightside -> any_type logop rightside .)
    KEYWORD_WHILE   reduce using rule 85 (rightside -> any_type logop rightside .)
    KEYWORD_FOR     reduce using rule 85 (rightside -> any_type logop rightside .)
    KEYWORD_IF      reduce using rule 85 (rightside -> any_type logop rightside .)
    $end            reduce using rule 85 (rightside -> any_type logop rightside .)
    BR_RCUR         reduce using rule 85 (rightside -> any_type logop rightside .)
    BR_RCSR         reduce using rule 85 (rightside -> any_type logop rightside .)
    SEP_COMMA       reduce using rule 85 (rightside -> any_type logop rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

  ! OP_PLUS         [ reduce using rule 85 (rightside -> any_type logop rightside .) ]
  ! OP_MINUS        [ reduce using rule 85 (rightside -> any_type logop rightside .) ]
  ! OP_MULT         [ reduce using rule 85 (rightside -> any_type logop rightside .) ]
  ! OP_DIVIDE       [ reduce using rule 85 (rightside -> any_type logop rightside .) ]
  ! OP_EXPO         [ reduce using rule 85 (rightside -> any_type logop rightside .) ]
  ! OP_REMDR        [ reduce using rule 85 (rightside -> any_type logop rightside .) ]

    math                           shift and go to state 71

state 111

    (84) rightside -> any_type bitop rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

  ! shift/reduce conflict for OP_PLUS resolved as shift
  ! shift/reduce conflict for OP_MINUS resolved as shift
  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIVIDE resolved as shift
  ! shift/reduce conflict for OP_EXPO resolved as shift
  ! shift/reduce conflict for OP_REMDR resolved as shift
    BR_RCIR         reduce using rule 84 (rightside -> any_type bitop rightside .)
    IDENTIFIER      reduce using rule 84 (rightside -> any_type bitop rightside .)
    KEYWORD_PRINT   reduce using rule 84 (rightside -> any_type bitop rightside .)
    KEYWORD_RETURN  reduce using rule 84 (rightside -> any_type bitop rightside .)
    KEYWORD_WHILE   reduce using rule 84 (rightside -> any_type bitop rightside .)
    KEYWORD_FOR     reduce using rule 84 (rightside -> any_type bitop rightside .)
    KEYWORD_IF      reduce using rule 84 (rightside -> any_type bitop rightside .)
    $end            reduce using rule 84 (rightside -> any_type bitop rightside .)
    BR_RCUR         reduce using rule 84 (rightside -> any_type bitop rightside .)
    BR_RCSR         reduce using rule 84 (rightside -> any_type bitop rightside .)
    SEP_COMMA       reduce using rule 84 (rightside -> any_type bitop rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

  ! OP_PLUS         [ reduce using rule 84 (rightside -> any_type bitop rightside .) ]
  ! OP_MINUS        [ reduce using rule 84 (rightside -> any_type bitop rightside .) ]
  ! OP_MULT         [ reduce using rule 84 (rightside -> any_type bitop rightside .) ]
  ! OP_DIVIDE       [ reduce using rule 84 (rightside -> any_type bitop rightside .) ]
  ! OP_EXPO         [ reduce using rule 84 (rightside -> any_type bitop rightside .) ]
  ! OP_REMDR        [ reduce using rule 84 (rightside -> any_type bitop rightside .) ]

    math                           shift and go to state 71

state 112

    (87) rightside -> IDENTIFIER logop rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

  ! shift/reduce conflict for OP_PLUS resolved as shift
  ! shift/reduce conflict for OP_MINUS resolved as shift
  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIVIDE resolved as shift
  ! shift/reduce conflict for OP_EXPO resolved as shift
  ! shift/reduce conflict for OP_REMDR resolved as shift
    BR_RCIR         reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    IDENTIFIER      reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    KEYWORD_PRINT   reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    KEYWORD_RETURN  reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    KEYWORD_WHILE   reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    KEYWORD_FOR     reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    KEYWORD_IF      reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    $end            reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    BR_RCUR         reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    BR_RCSR         reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    SEP_COMMA       reduce using rule 87 (rightside -> IDENTIFIER logop rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

  ! OP_PLUS         [ reduce using rule 87 (rightside -> IDENTIFIER logop rightside .) ]
  ! OP_MINUS        [ reduce using rule 87 (rightside -> IDENTIFIER logop rightside .) ]
  ! OP_MULT         [ reduce using rule 87 (rightside -> IDENTIFIER logop rightside .) ]
  ! OP_DIVIDE       [ reduce using rule 87 (rightside -> IDENTIFIER logop rightside .) ]
  ! OP_EXPO         [ reduce using rule 87 (rightside -> IDENTIFIER logop rightside .) ]
  ! OP_REMDR        [ reduce using rule 87 (rightside -> IDENTIFIER logop rightside .) ]

    math                           shift and go to state 71

state 113

    (90) rightside -> IDENTIFIER BR_LCSR rightside . BR_RCSR
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

    BR_RCSR         shift and go to state 137
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

    math                           shift and go to state 71

state 114

    (86) rightside -> IDENTIFIER bitop rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

  ! shift/reduce conflict for OP_PLUS resolved as shift
  ! shift/reduce conflict for OP_MINUS resolved as shift
  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIVIDE resolved as shift
  ! shift/reduce conflict for OP_EXPO resolved as shift
  ! shift/reduce conflict for OP_REMDR resolved as shift
    BR_RCIR         reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    IDENTIFIER      reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    KEYWORD_PRINT   reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    KEYWORD_RETURN  reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    KEYWORD_WHILE   reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    KEYWORD_FOR     reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    KEYWORD_IF      reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    $end            reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    BR_RCUR         reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    BR_RCSR         reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    SEP_COMMA       reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

  ! OP_PLUS         [ reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .) ]
  ! OP_MINUS        [ reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .) ]
  ! OP_MULT         [ reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .) ]
  ! OP_DIVIDE       [ reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .) ]
  ! OP_EXPO         [ reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .) ]
  ! OP_REMDR        [ reduce using rule 86 (rightside -> IDENTIFIER bitop rightside .) ]

    math                           shift and go to state 71

state 115

    (82) rightside -> IDENTIFIER math rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

  ! shift/reduce conflict for OP_PLUS resolved as shift
  ! shift/reduce conflict for OP_MINUS resolved as shift
  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIVIDE resolved as shift
  ! shift/reduce conflict for OP_EXPO resolved as shift
  ! shift/reduce conflict for OP_REMDR resolved as shift
    BR_RCIR         reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    IDENTIFIER      reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    KEYWORD_PRINT   reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    KEYWORD_RETURN  reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    KEYWORD_WHILE   reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    KEYWORD_FOR     reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    KEYWORD_IF      reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    $end            reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    BR_RCUR         reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    BR_RCSR         reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    SEP_COMMA       reduce using rule 82 (rightside -> IDENTIFIER math rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

  ! OP_PLUS         [ reduce using rule 82 (rightside -> IDENTIFIER math rightside .) ]
  ! OP_MINUS        [ reduce using rule 82 (rightside -> IDENTIFIER math rightside .) ]
  ! OP_MULT         [ reduce using rule 82 (rightside -> IDENTIFIER math rightside .) ]
  ! OP_DIVIDE       [ reduce using rule 82 (rightside -> IDENTIFIER math rightside .) ]
  ! OP_EXPO         [ reduce using rule 82 (rightside -> IDENTIFIER math rightside .) ]
  ! OP_REMDR        [ reduce using rule 82 (rightside -> IDENTIFIER math rightside .) ]

    math                           shift and go to state 71

state 116

    (21) arg_list -> IDENTIFIER . M_9 SEP_COMMA arg_list
    (22) arg_list -> IDENTIFIER . M_9
    (23) M_9 -> .

    SEP_COMMA       reduce using rule 23 (M_9 -> .)
    BR_RCIR         reduce using rule 23 (M_9 -> .)

    M_9                            shift and go to state 138

state 117

    (19) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR . M_12 compound_statement M_13
    (25) M_12 -> .

    BR_LCUR         reduce using rule 25 (M_12 -> .)

    M_12                           shift and go to state 139

state 118

    (18) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list . M_10 BR_RCIR compound_statement M_11
    (24) M_10 -> .

    BR_RCIR         reduce using rule 24 (M_10 -> .)

    M_10                           shift and go to state 140

state 119

    (78) vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements . BR_RCIR
    (79) vector_elements -> vector_elements . SEP_COMMA TYPE_INTEGER

    BR_RCIR         shift and go to state 141
    SEP_COMMA       shift and go to state 142


state 120

    (80) vector_elements -> TYPE_INTEGER .

    BR_RCIR         reduce using rule 80 (vector_elements -> TYPE_INTEGER .)
    SEP_COMMA       reduce using rule 80 (vector_elements -> TYPE_INTEGER .)


state 121

    (77) vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA . TYPE_INTEGER BR_RCIR

    TYPE_INTEGER    shift and go to state 143


state 122

    (71) expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN . rightside
    (81) rightside -> . rightside math rightside
    (82) rightside -> . IDENTIFIER math rightside
    (83) rightside -> . BR_LCIR rightside BR_RCIR
    (84) rightside -> . any_type bitop rightside
    (85) rightside -> . any_type logop rightside
    (86) rightside -> . IDENTIFIER bitop rightside
    (87) rightside -> . IDENTIFIER logop rightside
    (88) rightside -> . IDENTIFIER
    (89) rightside -> . any_type
    (90) rightside -> . IDENTIFIER BR_LCSR rightside BR_RCSR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    IDENTIFIER      shift and go to state 45
    BR_LCIR         shift and go to state 43
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39
    TYPE_BOOLEAN    shift and go to state 41

    rightside                      shift and go to state 144
    any_type                       shift and go to state 44

state 123

    (16) while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR . M_5 compound_statement M_6
    (32) M_5 -> .

    BR_LCUR         reduce using rule 32 (M_5 -> .)

    M_5                            shift and go to state 145

state 124

    (54) if_cond -> comparison_statement logop if_cond .

    BR_RCIR         reduce using rule 54 (if_cond -> comparison_statement logop if_cond .)


state 125

    (55) if_cond -> comparison_statement bitop if_cond .

    BR_RCIR         reduce using rule 55 (if_cond -> comparison_statement bitop if_cond .)


state 126

    (60) comparison_statement -> BR_LCIR if_cond BR_RCIR .

    OP_LOGAND       reduce using rule 60 (comparison_statement -> BR_LCIR if_cond BR_RCIR .)
    OP_LOGOR        reduce using rule 60 (comparison_statement -> BR_LCIR if_cond BR_RCIR .)
    OP_BITAND       reduce using rule 60 (comparison_statement -> BR_LCIR if_cond BR_RCIR .)
    OP_BITOR        reduce using rule 60 (comparison_statement -> BR_LCIR if_cond BR_RCIR .)
    BR_RCIR         reduce using rule 60 (comparison_statement -> BR_LCIR if_cond BR_RCIR .)


state 127

    (57) comparison_statement -> IDENTIFIER compop any_type .

    OP_LOGAND       reduce using rule 57 (comparison_statement -> IDENTIFIER compop any_type .)
    OP_LOGOR        reduce using rule 57 (comparison_statement -> IDENTIFIER compop any_type .)
    OP_BITAND       reduce using rule 57 (comparison_statement -> IDENTIFIER compop any_type .)
    OP_BITOR        reduce using rule 57 (comparison_statement -> IDENTIFIER compop any_type .)
    BR_RCIR         reduce using rule 57 (comparison_statement -> IDENTIFIER compop any_type .)


state 128

    (58) comparison_statement -> IDENTIFIER compop IDENTIFIER .

    OP_LOGAND       reduce using rule 58 (comparison_statement -> IDENTIFIER compop IDENTIFIER .)
    OP_LOGOR        reduce using rule 58 (comparison_statement -> IDENTIFIER compop IDENTIFIER .)
    OP_BITAND       reduce using rule 58 (comparison_statement -> IDENTIFIER compop IDENTIFIER .)
    OP_BITOR        reduce using rule 58 (comparison_statement -> IDENTIFIER compop IDENTIFIER .)
    BR_RCIR         reduce using rule 58 (comparison_statement -> IDENTIFIER compop IDENTIFIER .)


state 129

    (59) comparison_statement -> any_type compop any_type .

    OP_LOGAND       reduce using rule 59 (comparison_statement -> any_type compop any_type .)
    OP_LOGOR        reduce using rule 59 (comparison_statement -> any_type compop any_type .)
    OP_BITAND       reduce using rule 59 (comparison_statement -> any_type compop any_type .)
    OP_BITOR        reduce using rule 59 (comparison_statement -> any_type compop any_type .)
    BR_RCIR         reduce using rule 59 (comparison_statement -> any_type compop any_type .)


state 130

    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 . compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 . compound_statement M_3
    (44) compound_statement -> . BR_LCUR statement_list BR_RCUR

    BR_LCUR         shift and go to state 146

    compound_statement             shift and go to state 147

state 131

    (36) function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14 .

    IDENTIFIER      reduce using rule 36 (function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14 .)
    KEYWORD_PRINT   reduce using rule 36 (function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14 .)
    KEYWORD_RETURN  reduce using rule 36 (function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14 .)
    KEYWORD_WHILE   reduce using rule 36 (function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14 .)
    KEYWORD_FOR     reduce using rule 36 (function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14 .)
    KEYWORD_IF      reduce using rule 36 (function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14 .)
    $end            reduce using rule 36 (function_call -> fname2 BR_LCIR arg_to_pass BR_RCIR M_14 .)


state 132

    (39) arg_to_pass -> arg_to_pass SEP_COMMA arg . M_15
    (43) M_15 -> .

    BR_RCIR         reduce using rule 43 (M_15 -> .)
    SEP_COMMA       reduce using rule 43 (M_15 -> .)

    M_15                           shift and go to state 148

state 133

    (99) for_range_variables -> TYPE_INTEGER .

    BR_RCIR         reduce using rule 99 (for_range_variables -> TYPE_INTEGER .)
    SEP_COLON       reduce using rule 99 (for_range_variables -> TYPE_INTEGER .)


state 134

    (17) for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range . BR_RCIR M_7 compound_statement M_8

    BR_RCIR         shift and go to state 149


state 135

    (97) for_range -> for_range_variables . SEP_COLON for_range_variables

    SEP_COLON       shift and go to state 150


state 136

    (98) for_range_variables -> IDENTIFIER .

    BR_RCIR         reduce using rule 98 (for_range_variables -> IDENTIFIER .)
    SEP_COLON       reduce using rule 98 (for_range_variables -> IDENTIFIER .)


state 137

    (90) rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .

    OP_PLUS         reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    OP_MINUS        reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    OP_MULT         reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    OP_DIVIDE       reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    OP_EXPO         reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    OP_REMDR        reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    BR_RCIR         reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    IDENTIFIER      reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    KEYWORD_PRINT   reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    KEYWORD_RETURN  reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    KEYWORD_WHILE   reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    KEYWORD_FOR     reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    KEYWORD_IF      reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    $end            reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    BR_RCUR         reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    BR_RCSR         reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)
    SEP_COMMA       reduce using rule 90 (rightside -> IDENTIFIER BR_LCSR rightside BR_RCSR .)


state 138

    (21) arg_list -> IDENTIFIER M_9 . SEP_COMMA arg_list
    (22) arg_list -> IDENTIFIER M_9 .

    SEP_COMMA       shift and go to state 151
    BR_RCIR         reduce using rule 22 (arg_list -> IDENTIFIER M_9 .)


state 139

    (19) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 . compound_statement M_13
    (44) compound_statement -> . BR_LCUR statement_list BR_RCUR

    BR_LCUR         shift and go to state 146

    compound_statement             shift and go to state 152

state 140

    (18) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 . BR_RCIR compound_statement M_11

    BR_RCIR         shift and go to state 153


state 141

    (78) vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .

    IDENTIFIER      reduce using rule 78 (vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .)
    KEYWORD_PRINT   reduce using rule 78 (vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .)
    KEYWORD_RETURN  reduce using rule 78 (vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .)
    KEYWORD_WHILE   reduce using rule 78 (vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .)
    KEYWORD_FOR     reduce using rule 78 (vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .)
    KEYWORD_IF      reduce using rule 78 (vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .)
    $end            reduce using rule 78 (vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .)
    BR_RCUR         reduce using rule 78 (vector_definition -> KEYWORD_VECTOR_CONSTRUCTOR BR_LCIR vector_elements BR_RCIR .)


state 142

    (79) vector_elements -> vector_elements SEP_COMMA . TYPE_INTEGER

    TYPE_INTEGER    shift and go to state 154


state 143

    (77) vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER . BR_RCIR

    BR_RCIR         shift and go to state 155


state 144

    (71) expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .
    (81) rightside -> rightside . math rightside
    (91) math -> . OP_PLUS
    (92) math -> . OP_MINUS
    (93) math -> . OP_MULT
    (94) math -> . OP_DIVIDE
    (95) math -> . OP_EXPO
    (96) math -> . OP_REMDR

    BR_RCUR         reduce using rule 71 (expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .)
    IDENTIFIER      reduce using rule 71 (expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .)
    KEYWORD_PRINT   reduce using rule 71 (expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .)
    KEYWORD_RETURN  reduce using rule 71 (expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .)
    KEYWORD_FOR     reduce using rule 71 (expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .)
    KEYWORD_WHILE   reduce using rule 71 (expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .)
    KEYWORD_IF      reduce using rule 71 (expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .)
    $end            reduce using rule 71 (expression -> IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside .)
    OP_PLUS         shift and go to state 69
    OP_MINUS        shift and go to state 70
    OP_MULT         shift and go to state 65
    OP_DIVIDE       shift and go to state 68
    OP_EXPO         shift and go to state 72
    OP_REMDR        shift and go to state 67

    math                           shift and go to state 71

state 145

    (16) while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 . compound_statement M_6
    (44) compound_statement -> . BR_LCUR statement_list BR_RCUR

    BR_LCUR         shift and go to state 146

    compound_statement             shift and go to state 156

state 146

    (44) compound_statement -> BR_LCUR . statement_list BR_RCUR
    (45) statement_list -> . statement_list statement
    (46) statement_list -> . statement
    (47) statement -> . expression
    (48) statement -> . for_loop
    (49) statement -> . while_loop
    (50) statement -> . if_statement
    (51) statement -> . if_else_statement
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3

    IDENTIFIER      shift and go to state 159
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_IF      shift and go to state 162

    for_loop                       shift and go to state 160
    while_loop                     shift and go to state 161
    if_else_statement              shift and go to state 157
    statement                      shift and go to state 158
    statement_list                 shift and go to state 165
    if_statement                   shift and go to state 163
    expression                     shift and go to state 164

state 147

    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement . KEYWORD_ELSE M_2 compound_statement M_3
    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement . M_3
    (30) M_3 -> .

    KEYWORD_ELSE    shift and go to state 166
    IDENTIFIER      reduce using rule 30 (M_3 -> .)
    KEYWORD_PRINT   reduce using rule 30 (M_3 -> .)
    KEYWORD_RETURN  reduce using rule 30 (M_3 -> .)
    KEYWORD_WHILE   reduce using rule 30 (M_3 -> .)
    KEYWORD_FOR     reduce using rule 30 (M_3 -> .)
    KEYWORD_IF      reduce using rule 30 (M_3 -> .)
    $end            reduce using rule 30 (M_3 -> .)

    M_3                            shift and go to state 167

state 148

    (39) arg_to_pass -> arg_to_pass SEP_COMMA arg M_15 .

    BR_RCIR         reduce using rule 39 (arg_to_pass -> arg_to_pass SEP_COMMA arg M_15 .)
    SEP_COMMA       reduce using rule 39 (arg_to_pass -> arg_to_pass SEP_COMMA arg M_15 .)


state 149

    (17) for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR . M_7 compound_statement M_8
    (34) M_7 -> .

    BR_LCUR         reduce using rule 34 (M_7 -> .)

    M_7                            shift and go to state 168

state 150

    (97) for_range -> for_range_variables SEP_COLON . for_range_variables
    (98) for_range_variables -> . IDENTIFIER
    (99) for_range_variables -> . TYPE_INTEGER

    IDENTIFIER      shift and go to state 136
    TYPE_INTEGER    shift and go to state 133

    for_range_variables            shift and go to state 169

state 151

    (21) arg_list -> IDENTIFIER M_9 SEP_COMMA . arg_list
    (21) arg_list -> . IDENTIFIER M_9 SEP_COMMA arg_list
    (22) arg_list -> . IDENTIFIER M_9

    IDENTIFIER      shift and go to state 116

    arg_list                       shift and go to state 170

state 152

    (19) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement . M_13
    (27) M_13 -> .

    IDENTIFIER      reduce using rule 27 (M_13 -> .)
    KEYWORD_PRINT   reduce using rule 27 (M_13 -> .)
    KEYWORD_RETURN  reduce using rule 27 (M_13 -> .)
    KEYWORD_WHILE   reduce using rule 27 (M_13 -> .)
    KEYWORD_FOR     reduce using rule 27 (M_13 -> .)
    KEYWORD_IF      reduce using rule 27 (M_13 -> .)
    $end            reduce using rule 27 (M_13 -> .)

    M_13                           shift and go to state 171

state 153

    (18) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR . compound_statement M_11
    (44) compound_statement -> . BR_LCUR statement_list BR_RCUR

    BR_LCUR         shift and go to state 146

    compound_statement             shift and go to state 172

state 154

    (79) vector_elements -> vector_elements SEP_COMMA TYPE_INTEGER .

    BR_RCIR         reduce using rule 79 (vector_elements -> vector_elements SEP_COMMA TYPE_INTEGER .)
    SEP_COMMA       reduce using rule 79 (vector_elements -> vector_elements SEP_COMMA TYPE_INTEGER .)


state 155

    (77) vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .

    IDENTIFIER      reduce using rule 77 (vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .)
    KEYWORD_PRINT   reduce using rule 77 (vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .)
    KEYWORD_RETURN  reduce using rule 77 (vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .)
    KEYWORD_WHILE   reduce using rule 77 (vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .)
    KEYWORD_FOR     reduce using rule 77 (vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .)
    KEYWORD_IF      reduce using rule 77 (vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .)
    $end            reduce using rule 77 (vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .)
    BR_RCUR         reduce using rule 77 (vector_definition -> KEYWORD_VECTOR BR_LCIR SEP_COMMA TYPE_INTEGER BR_RCIR .)


state 156

    (16) while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement . M_6
    (33) M_6 -> .

    IDENTIFIER      reduce using rule 33 (M_6 -> .)
    KEYWORD_PRINT   reduce using rule 33 (M_6 -> .)
    KEYWORD_RETURN  reduce using rule 33 (M_6 -> .)
    KEYWORD_WHILE   reduce using rule 33 (M_6 -> .)
    KEYWORD_FOR     reduce using rule 33 (M_6 -> .)
    KEYWORD_IF      reduce using rule 33 (M_6 -> .)
    $end            reduce using rule 33 (M_6 -> .)
    BR_RCUR         reduce using rule 33 (M_6 -> .)

    M_6                            shift and go to state 173

state 157

    (51) statement -> if_else_statement .

    BR_RCUR         reduce using rule 51 (statement -> if_else_statement .)
    IDENTIFIER      reduce using rule 51 (statement -> if_else_statement .)
    KEYWORD_PRINT   reduce using rule 51 (statement -> if_else_statement .)
    KEYWORD_RETURN  reduce using rule 51 (statement -> if_else_statement .)
    KEYWORD_FOR     reduce using rule 51 (statement -> if_else_statement .)
    KEYWORD_WHILE   reduce using rule 51 (statement -> if_else_statement .)
    KEYWORD_IF      reduce using rule 51 (statement -> if_else_statement .)


state 158

    (46) statement_list -> statement .

    BR_RCUR         reduce using rule 46 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 46 (statement_list -> statement .)
    KEYWORD_PRINT   reduce using rule 46 (statement_list -> statement .)
    KEYWORD_RETURN  reduce using rule 46 (statement_list -> statement .)
    KEYWORD_FOR     reduce using rule 46 (statement_list -> statement .)
    KEYWORD_WHILE   reduce using rule 46 (statement_list -> statement .)
    KEYWORD_IF      reduce using rule 46 (statement_list -> statement .)


state 159

    (71) expression -> IDENTIFIER . BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> IDENTIFIER . OP_ASGN rightside
    (73) expression -> IDENTIFIER . OP_ASGN vector_definition M_16

    BR_LCSR         shift and go to state 27
    OP_ASGN         shift and go to state 26


state 160

    (48) statement -> for_loop .

    BR_RCUR         reduce using rule 48 (statement -> for_loop .)
    IDENTIFIER      reduce using rule 48 (statement -> for_loop .)
    KEYWORD_PRINT   reduce using rule 48 (statement -> for_loop .)
    KEYWORD_RETURN  reduce using rule 48 (statement -> for_loop .)
    KEYWORD_FOR     reduce using rule 48 (statement -> for_loop .)
    KEYWORD_WHILE   reduce using rule 48 (statement -> for_loop .)
    KEYWORD_IF      reduce using rule 48 (statement -> for_loop .)


state 161

    (49) statement -> while_loop .

    BR_RCUR         reduce using rule 49 (statement -> while_loop .)
    IDENTIFIER      reduce using rule 49 (statement -> while_loop .)
    KEYWORD_PRINT   reduce using rule 49 (statement -> while_loop .)
    KEYWORD_RETURN  reduce using rule 49 (statement -> while_loop .)
    KEYWORD_FOR     reduce using rule 49 (statement -> while_loop .)
    KEYWORD_WHILE   reduce using rule 49 (statement -> while_loop .)
    KEYWORD_IF      reduce using rule 49 (statement -> while_loop .)


state 162

    (15) if_statement -> KEYWORD_IF . BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (14) if_else_statement -> KEYWORD_IF . BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3

    BR_LCIR         shift and go to state 174


state 163

    (50) statement -> if_statement .

    BR_RCUR         reduce using rule 50 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 50 (statement -> if_statement .)
    KEYWORD_PRINT   reduce using rule 50 (statement -> if_statement .)
    KEYWORD_RETURN  reduce using rule 50 (statement -> if_statement .)
    KEYWORD_FOR     reduce using rule 50 (statement -> if_statement .)
    KEYWORD_WHILE   reduce using rule 50 (statement -> if_statement .)
    KEYWORD_IF      reduce using rule 50 (statement -> if_statement .)


state 164

    (47) statement -> expression .

    BR_RCUR         reduce using rule 47 (statement -> expression .)
    IDENTIFIER      reduce using rule 47 (statement -> expression .)
    KEYWORD_PRINT   reduce using rule 47 (statement -> expression .)
    KEYWORD_RETURN  reduce using rule 47 (statement -> expression .)
    KEYWORD_FOR     reduce using rule 47 (statement -> expression .)
    KEYWORD_WHILE   reduce using rule 47 (statement -> expression .)
    KEYWORD_IF      reduce using rule 47 (statement -> expression .)


state 165

    (44) compound_statement -> BR_LCUR statement_list . BR_RCUR
    (45) statement_list -> statement_list . statement
    (47) statement -> . expression
    (48) statement -> . for_loop
    (49) statement -> . while_loop
    (50) statement -> . if_statement
    (51) statement -> . if_else_statement
    (71) expression -> . IDENTIFIER BR_LCSR rightside BR_RCSR OP_ASGN rightside
    (72) expression -> . IDENTIFIER OP_ASGN rightside
    (73) expression -> . IDENTIFIER OP_ASGN vector_definition M_16
    (75) expression -> . KEYWORD_PRINT BR_LCIR rightside BR_RCIR
    (76) expression -> . KEYWORD_RETURN BR_LCIR rightside BR_RCIR
    (17) for_loop -> . KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8
    (16) while_loop -> . KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6
    (15) if_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3
    (14) if_else_statement -> . KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3

    BR_RCUR         shift and go to state 176
    IDENTIFIER      shift and go to state 159
    KEYWORD_PRINT   shift and go to state 21
    KEYWORD_RETURN  shift and go to state 2
    KEYWORD_FOR     shift and go to state 19
    KEYWORD_WHILE   shift and go to state 9
    KEYWORD_IF      shift and go to state 162

    for_loop                       shift and go to state 160
    while_loop                     shift and go to state 161
    if_else_statement              shift and go to state 157
    statement                      shift and go to state 175
    if_statement                   shift and go to state 163
    expression                     shift and go to state 164

state 166

    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE . M_2 compound_statement M_3
    (29) M_2 -> .

    BR_LCUR         reduce using rule 29 (M_2 -> .)

    M_2                            shift and go to state 177

state 167

    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .

    IDENTIFIER      reduce using rule 15 (if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .)
    KEYWORD_PRINT   reduce using rule 15 (if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .)
    KEYWORD_RETURN  reduce using rule 15 (if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .)
    KEYWORD_WHILE   reduce using rule 15 (if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .)
    KEYWORD_FOR     reduce using rule 15 (if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .)
    KEYWORD_IF      reduce using rule 15 (if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .)
    $end            reduce using rule 15 (if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .)
    BR_RCUR         reduce using rule 15 (if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement M_3 .)


state 168

    (17) for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 . compound_statement M_8
    (44) compound_statement -> . BR_LCUR statement_list BR_RCUR

    BR_LCUR         shift and go to state 146

    compound_statement             shift and go to state 178

state 169

    (97) for_range -> for_range_variables SEP_COLON for_range_variables .

    BR_RCIR         reduce using rule 97 (for_range -> for_range_variables SEP_COLON for_range_variables .)


state 170

    (21) arg_list -> IDENTIFIER M_9 SEP_COMMA arg_list .

    BR_RCIR         reduce using rule 21 (arg_list -> IDENTIFIER M_9 SEP_COMMA arg_list .)


state 171

    (19) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13 .

    IDENTIFIER      reduce using rule 19 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13 .)
    KEYWORD_PRINT   reduce using rule 19 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13 .)
    KEYWORD_RETURN  reduce using rule 19 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13 .)
    KEYWORD_WHILE   reduce using rule 19 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13 .)
    KEYWORD_FOR     reduce using rule 19 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13 .)
    KEYWORD_IF      reduce using rule 19 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13 .)
    $end            reduce using rule 19 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR BR_RCIR M_12 compound_statement M_13 .)


state 172

    (18) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement . M_11
    (26) M_11 -> .

    IDENTIFIER      reduce using rule 26 (M_11 -> .)
    KEYWORD_PRINT   reduce using rule 26 (M_11 -> .)
    KEYWORD_RETURN  reduce using rule 26 (M_11 -> .)
    KEYWORD_WHILE   reduce using rule 26 (M_11 -> .)
    KEYWORD_FOR     reduce using rule 26 (M_11 -> .)
    KEYWORD_IF      reduce using rule 26 (M_11 -> .)
    $end            reduce using rule 26 (M_11 -> .)

    M_11                           shift and go to state 179

state 173

    (16) while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .

    IDENTIFIER      reduce using rule 16 (while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .)
    KEYWORD_PRINT   reduce using rule 16 (while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .)
    KEYWORD_RETURN  reduce using rule 16 (while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .)
    KEYWORD_WHILE   reduce using rule 16 (while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .)
    KEYWORD_FOR     reduce using rule 16 (while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .)
    KEYWORD_IF      reduce using rule 16 (while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .)
    $end            reduce using rule 16 (while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .)
    BR_RCUR         reduce using rule 16 (while_loop -> KEYWORD_WHILE BR_LCIR M_4 if_cond BR_RCIR M_5 compound_statement M_6 .)


state 174

    (15) if_statement -> KEYWORD_IF BR_LCIR . if_cond BR_RCIR M_1 compound_statement M_3
    (14) if_else_statement -> KEYWORD_IF BR_LCIR . if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (52) if_cond -> . TYPE_BOOLEAN
    (53) if_cond -> . comparison_statement
    (54) if_cond -> . comparison_statement logop if_cond
    (55) if_cond -> . comparison_statement bitop if_cond
    (56) if_cond -> . OP_BITNOT if_cond
    (57) comparison_statement -> . IDENTIFIER compop any_type
    (58) comparison_statement -> . IDENTIFIER compop IDENTIFIER
    (59) comparison_statement -> . any_type compop any_type
    (60) comparison_statement -> . BR_LCIR if_cond BR_RCIR
    (100) any_type -> . TYPE_NUMERIC
    (101) any_type -> . TYPE_INTEGER
    (102) any_type -> . TYPE_STRING
    (103) any_type -> . TYPE_BOOLEAN

    TYPE_BOOLEAN    shift and go to state 54
    OP_BITNOT       shift and go to state 55
    IDENTIFIER      shift and go to state 57
    BR_LCIR         shift and go to state 56
    TYPE_NUMERIC    shift and go to state 40
    TYPE_INTEGER    shift and go to state 42
    TYPE_STRING     shift and go to state 39

    comparison_statement           shift and go to state 53
    any_type                       shift and go to state 58
    if_cond                        shift and go to state 180

state 175

    (45) statement_list -> statement_list statement .

    BR_RCUR         reduce using rule 45 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 45 (statement_list -> statement_list statement .)
    KEYWORD_PRINT   reduce using rule 45 (statement_list -> statement_list statement .)
    KEYWORD_RETURN  reduce using rule 45 (statement_list -> statement_list statement .)
    KEYWORD_FOR     reduce using rule 45 (statement_list -> statement_list statement .)
    KEYWORD_WHILE   reduce using rule 45 (statement_list -> statement_list statement .)
    KEYWORD_IF      reduce using rule 45 (statement_list -> statement_list statement .)


state 176

    (44) compound_statement -> BR_LCUR statement_list BR_RCUR .

    IDENTIFIER      reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)
    KEYWORD_PRINT   reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)
    KEYWORD_RETURN  reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)
    KEYWORD_WHILE   reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)
    KEYWORD_FOR     reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)
    KEYWORD_IF      reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)
    $end            reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)
    KEYWORD_ELSE    reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)
    BR_RCUR         reduce using rule 44 (compound_statement -> BR_LCUR statement_list BR_RCUR .)


state 177

    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 . compound_statement M_3
    (44) compound_statement -> . BR_LCUR statement_list BR_RCUR

    BR_LCUR         shift and go to state 146

    compound_statement             shift and go to state 181

state 178

    (17) for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement . M_8
    (35) M_8 -> .

    IDENTIFIER      reduce using rule 35 (M_8 -> .)
    KEYWORD_PRINT   reduce using rule 35 (M_8 -> .)
    KEYWORD_RETURN  reduce using rule 35 (M_8 -> .)
    KEYWORD_WHILE   reduce using rule 35 (M_8 -> .)
    KEYWORD_FOR     reduce using rule 35 (M_8 -> .)
    KEYWORD_IF      reduce using rule 35 (M_8 -> .)
    $end            reduce using rule 35 (M_8 -> .)
    BR_RCUR         reduce using rule 35 (M_8 -> .)

    M_8                            shift and go to state 182

state 179

    (18) function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11 .

    IDENTIFIER      reduce using rule 18 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11 .)
    KEYWORD_PRINT   reduce using rule 18 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11 .)
    KEYWORD_RETURN  reduce using rule 18 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11 .)
    KEYWORD_WHILE   reduce using rule 18 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11 .)
    KEYWORD_FOR     reduce using rule 18 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11 .)
    KEYWORD_IF      reduce using rule 18 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11 .)
    $end            reduce using rule 18 (function_definition -> fname OP_FUNC_ASGN KEYWORD_FUNCTION BR_LCIR arg_list M_10 BR_RCIR compound_statement M_11 .)


state 180

    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond . BR_RCIR M_1 compound_statement M_3
    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond . BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3

    BR_RCIR         shift and go to state 183


state 181

    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement . M_3
    (30) M_3 -> .

    IDENTIFIER      reduce using rule 30 (M_3 -> .)
    KEYWORD_PRINT   reduce using rule 30 (M_3 -> .)
    KEYWORD_RETURN  reduce using rule 30 (M_3 -> .)
    KEYWORD_WHILE   reduce using rule 30 (M_3 -> .)
    KEYWORD_FOR     reduce using rule 30 (M_3 -> .)
    KEYWORD_IF      reduce using rule 30 (M_3 -> .)
    $end            reduce using rule 30 (M_3 -> .)
    BR_RCUR         reduce using rule 30 (M_3 -> .)

    M_3                            shift and go to state 184

state 182

    (17) for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .

    BR_RCUR         reduce using rule 17 (for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .)
    IDENTIFIER      reduce using rule 17 (for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .)
    KEYWORD_PRINT   reduce using rule 17 (for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .)
    KEYWORD_RETURN  reduce using rule 17 (for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .)
    KEYWORD_FOR     reduce using rule 17 (for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .)
    KEYWORD_WHILE   reduce using rule 17 (for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .)
    KEYWORD_IF      reduce using rule 17 (for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .)
    $end            reduce using rule 17 (for_loop -> KEYWORD_FOR BR_LCIR IDENTIFIER KEYWORD_IN for_range BR_RCIR M_7 compound_statement M_8 .)


state 183

    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR . M_1 compound_statement M_3
    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR . M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (28) M_1 -> .

    BR_LCUR         reduce using rule 28 (M_1 -> .)

    M_1                            shift and go to state 185

state 184

    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .

    IDENTIFIER      reduce using rule 14 (if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .)
    KEYWORD_PRINT   reduce using rule 14 (if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .)
    KEYWORD_RETURN  reduce using rule 14 (if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .)
    KEYWORD_WHILE   reduce using rule 14 (if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .)
    KEYWORD_FOR     reduce using rule 14 (if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .)
    KEYWORD_IF      reduce using rule 14 (if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .)
    $end            reduce using rule 14 (if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .)
    BR_RCUR         reduce using rule 14 (if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement KEYWORD_ELSE M_2 compound_statement M_3 .)


state 185

    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 . compound_statement M_3
    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 . compound_statement KEYWORD_ELSE M_2 compound_statement M_3
    (44) compound_statement -> . BR_LCUR statement_list BR_RCUR

    BR_LCUR         shift and go to state 146

    compound_statement             shift and go to state 186

state 186

    (15) if_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement . M_3
    (14) if_else_statement -> KEYWORD_IF BR_LCIR if_cond BR_RCIR M_1 compound_statement . KEYWORD_ELSE M_2 compound_statement M_3
    (30) M_3 -> .

    KEYWORD_ELSE    shift and go to state 166
    BR_RCUR         reduce using rule 30 (M_3 -> .)
    IDENTIFIER      reduce using rule 30 (M_3 -> .)
    KEYWORD_PRINT   reduce using rule 30 (M_3 -> .)
    KEYWORD_RETURN  reduce using rule 30 (M_3 -> .)
    KEYWORD_FOR     reduce using rule 30 (M_3 -> .)
    KEYWORD_WHILE   reduce using rule 30 (M_3 -> .)
    KEYWORD_IF      reduce using rule 30 (M_3 -> .)

    M_3                            shift and go to state 167
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OP_PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for OP_MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 45 resolved as shift
WARNING: shift/reduce conflict for OP_DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for OP_EXPO in state 45 resolved as shift
WARNING: shift/reduce conflict for OP_REMDR in state 45 resolved as shift
WARNING: shift/reduce conflict for OP_PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for OP_MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 108 resolved as shift
WARNING: shift/reduce conflict for OP_DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for OP_EXPO in state 108 resolved as shift
WARNING: shift/reduce conflict for OP_REMDR in state 108 resolved as shift
WARNING: shift/reduce conflict for OP_PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for OP_MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 110 resolved as shift
WARNING: shift/reduce conflict for OP_DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for OP_EXPO in state 110 resolved as shift
WARNING: shift/reduce conflict for OP_REMDR in state 110 resolved as shift
WARNING: shift/reduce conflict for OP_PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for OP_MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 111 resolved as shift
WARNING: shift/reduce conflict for OP_DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for OP_EXPO in state 111 resolved as shift
WARNING: shift/reduce conflict for OP_REMDR in state 111 resolved as shift
WARNING: shift/reduce conflict for OP_PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for OP_MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 112 resolved as shift
WARNING: shift/reduce conflict for OP_DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for OP_EXPO in state 112 resolved as shift
WARNING: shift/reduce conflict for OP_REMDR in state 112 resolved as shift
WARNING: shift/reduce conflict for OP_PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for OP_MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 114 resolved as shift
WARNING: shift/reduce conflict for OP_DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for OP_EXPO in state 114 resolved as shift
WARNING: shift/reduce conflict for OP_REMDR in state 114 resolved as shift
WARNING: shift/reduce conflict for OP_PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for OP_MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 115 resolved as shift
WARNING: shift/reduce conflict for OP_DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for OP_EXPO in state 115 resolved as shift
WARNING: shift/reduce conflict for OP_REMDR in state 115 resolved as shift
